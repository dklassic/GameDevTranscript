1
00:00:01,851 --> 00:00:04,272
這場活動我先介紹一下

2
00:00:04,272 --> 00:00:08,014
因為有些現場是之前沒有來參加過的

3
00:00:08,014 --> 00:00:13,437
我們這個健康網絡工作坊的系列是

4
00:00:13,437 --> 00:00:16,039
由Jonas 索諾迪卡的組成

5
00:00:17,173 --> 00:00:19,654
他在去年底的時候提出來一個想法

6
00:00:19,654 --> 00:00:22,736
他就是把大家常常會遇到的問題

7
00:00:22,736 --> 00:00:24,416
先做一些基本整理之後

8
00:00:24,416 --> 00:00:26,938
他把常見的分類的問題

9
00:00:26,938 --> 00:00:28,798
就是一項一項弄成一個大章節

10
00:00:28,798 --> 00:00:31,140
然後一段一段來講

11
00:00:31,140 --> 00:00:33,641
如果大家有先去看他Vtopper

12
00:00:33,641 --> 00:00:35,702
的Republic of Greece上面的話

13
00:00:35,702 --> 00:00:36,962
你會發現已經有一些更多的議題

14
00:00:36,962 --> 00:00:40,984
已經在後面有在草稿籌劃當中

15
00:00:40,984 --> 00:00:42,105
那就是說這個系列應該會持續辦下去

16
00:00:44,548 --> 00:00:48,410
這個系列的問題不是為了解決單一的技術困難

17
00:00:48,410 --> 00:00:49,931
或是針對性的問題

18
00:00:49,931 --> 00:00:52,773
是針對一個比較共通的模式

19
00:00:52,773 --> 00:00:54,954
去挑一些問題出來解

20
00:00:54,954 --> 00:01:02,718
所以我們第一次在去年底辦了DeCoupling的講座

21
00:01:02,718 --> 00:01:04,919
第二場在那時間點整理資料之後

22
00:01:06,317 --> 00:01:07,998
CI是比較適合的下一場

23
00:01:07,998 --> 00:01:08,338
所以就在這邊舉辦這一場

24
00:01:08,338 --> 00:01:15,202
Continuous Integration 持續整合的講座

25
00:01:15,202 --> 00:01:18,904
我們這個議程會用

26
00:01:18,904 --> 00:01:19,304
偶爾會用國語翻譯

27
00:01:19,304 --> 00:01:19,784
我會盡量帶國語翻譯的內容

28
00:01:23,286 --> 00:01:24,788
不會到百分之百完全對應

29
00:01:24,788 --> 00:01:27,630
因為很多技術細節

30
00:01:27,630 --> 00:01:30,793
我這邊也沒辦法做百分之百的口語翻譯

31
00:01:30,793 --> 00:01:32,394
如果有不明白

32
00:01:32,394 --> 00:01:33,996
或是哪裡不清楚的地方

33
00:01:33,996 --> 00:01:35,037
歡迎隨時舉手提出來

34
00:01:35,037 --> 00:01:35,577
請講師再重新解釋

35
00:01:35,577 --> 00:01:37,599
或是請我這邊再重新翻譯一次

36
00:01:37,599 --> 00:01:37,979
都可以

37
00:01:37,979 --> 00:01:38,400
因為要同時講雙語的關係

38
00:01:45,035 --> 00:01:46,976
這場內容其實步調比較慢

39
00:01:46,976 --> 00:01:49,959
如果你已經是CI有經驗的開發者的話

40
00:01:49,959 --> 00:01:52,721
可能你可以在比較空間

41
00:01:52,721 --> 00:01:54,603
如果你覺得這個MEME比較低

42
00:01:54,603 --> 00:01:55,263
比較空的話

43
00:01:55,263 --> 00:01:56,905
現在可以準備一些比較進階的問題

44
00:01:56,905 --> 00:01:57,806
等一下可以問請問有哪些問題

45
00:01:57,806 --> 00:02:00,388
好,所以我要重複一次

46
00:02:00,388 --> 00:02:00,928
所以

47
00:02:04,447 --> 00:02:10,950
For those who don't know about the Game Dev Workshop,

48
00:02:10,950 --> 00:02:13,751
this healthy coding workshop,

49
00:02:13,751 --> 00:02:18,093
Jonas started since last year, late last year, 2019.

50
00:02:18,093 --> 00:02:23,676
He is the lead programmer on Subnautica,

51
00:02:23,676 --> 00:02:26,937
which is a very hot game on Steam and other platforms.

52
00:02:26,937 --> 00:02:29,458
Are you ready right now?

53
00:02:29,458 --> 00:02:30,459
Yeah, yeah, yeah.

54
00:02:30,459 --> 00:02:34,020
Xbox, PlayStation, Epic Games, Discord.

55
00:02:35,242 --> 00:02:37,643
Windows Store.

56
00:02:37,643 --> 00:02:39,344
Yeah, so.

57
00:02:39,344 --> 00:02:40,104
Arc in China.

58
00:02:40,104 --> 00:02:43,526
Okay, that's new.

59
00:02:43,526 --> 00:02:44,366
Okay, so.

60
00:02:44,366 --> 00:02:50,049
Yeah, so he noticed there are like just patterns

61
00:02:50,049 --> 00:02:55,232
about like different type of questions within the game community that

62
00:02:55,232 --> 00:02:57,693
we just constantly ask each other about.

63
00:02:58,192 --> 00:03:04,296
And so the first session, the first workshop that he did was on decoupling.

64
00:03:04,296 --> 00:03:18,705
So like how to go about just tidy your code base and then just make your code structure more clean and more maintainable.

65
00:03:18,705 --> 00:03:26,991
And now the second topic this time, which is the thing we're doing right now, is on continuous integration.

66
00:03:28,076 --> 00:03:31,518
which we'll be talking about Jenkins mainly,

67
00:03:31,518 --> 00:03:34,259
and how Jenkins works with GitHub.

68
00:03:34,259 --> 00:03:37,141
So if you have any advanced questions that you already,

69
00:03:37,141 --> 00:03:39,903
maybe you're already a CI practitioner,

70
00:03:39,903 --> 00:03:41,904
you're already a Jenkins user,

71
00:03:41,904 --> 00:03:44,145
if you have any advanced questions

72
00:03:44,145 --> 00:03:46,247
that you think our pacing's too slow,

73
00:03:46,247 --> 00:03:50,949
just prepare your advanced questions

74
00:03:50,949 --> 00:03:53,431
and ask us afterwards.

75
00:03:53,431 --> 00:03:56,273
So, like, without further ado, so.

76
00:03:57,457 --> 00:03:59,278
Let's give applause to Jens.

77
00:03:59,278 --> 00:04:01,319
Thank you. Thank you all for coming, full house today.

78
00:04:01,319 --> 00:04:06,581
Thank you for the introduction.

79
00:04:06,581 --> 00:04:13,765
You already mentioned, we're mainly going to talk about Jenkins today, but let me ask.

80
00:04:13,765 --> 00:04:26,272
So, continuous integration is one of the things that came up a lot in the feedback and suggestions document that I made.

81
00:04:27,675 --> 00:04:31,298
所以在這方面,誰已經使用了一些類似的連接方式

82
00:04:31,298 --> 00:04:38,585
有人想回答嗎?

83
00:04:38,585 --> 00:04:43,729
如果你已經有使用持續整合的方法

84
00:04:43,729 --> 00:04:45,371
在開發你的軟體或遊戲

85
00:04:45,371 --> 00:04:47,493
那就可以選擇了

86
00:04:47,493 --> 00:04:48,654
不過剛剛看起來大部分都聽得懂

87
00:04:48,654 --> 00:04:51,716
我的目標是在今天工作結束後

88
00:04:55,321 --> 00:04:59,162
all of you can know how to set this up and get it running.

89
00:04:59,162 --> 00:05:02,043
It's not too hard if you know what you're doing.

90
00:05:02,043 --> 00:05:11,145
The reason why I think this is useful to have is because

91
00:05:11,145 --> 00:05:15,286
it's quite common to have something like this,

92
00:05:15,286 --> 00:05:21,208
where someone changed something and now...

93
00:05:22,820 --> 00:05:24,922
materials is missing

94
00:05:24,922 --> 00:05:27,203
and you don't know

95
00:05:27,203 --> 00:05:29,425
your game looks like this

96
00:05:29,425 --> 00:05:31,006
and you don't know why

97
00:05:31,006 --> 00:05:32,206
ok, so sorry

98
00:05:32,206 --> 00:05:34,207
今天的目的就是希望說大家在

99
00:05:34,207 --> 00:05:36,169
還沒有用過CI的人可能在進入之後

100
00:05:36,169 --> 00:05:38,050
可以至少知道setup jankies

101
00:05:38,050 --> 00:05:39,030
那今天這個

102
00:05:40,071 --> 00:05:42,733
talker 最主要的常見的病因

103
00:05:42,733 --> 00:05:45,434
就是像現在畫面中看到這個畫面

104
00:05:45,434 --> 00:05:48,176
可能團隊裡面的某位美術或其他的

105
00:05:48,176 --> 00:05:49,376
可能改了一下材質

106
00:05:49,376 --> 00:05:51,457
然後材質就變成預設的

107
00:05:51,457 --> 00:05:53,458
就變成紅色這樣就淘掉了

108
00:05:53,458 --> 00:05:56,180
那這個狀況就是在沒有使用

109
00:05:56,180 --> 00:05:57,901
持續審核的時候就很容易

110
00:05:57,901 --> 00:05:59,122
不知道去哪裡抓是誰改的

111
00:06:03,214 --> 00:06:11,396
Some programmer checks something in and now the code is not compiling.

112
00:06:11,396 --> 00:06:20,739
Now everyone on the team cannot play the game and see how it runs.

113
00:06:20,739 --> 00:06:29,462
So the idea would be to work separately from the main branch.

114
00:06:29,804 --> 00:06:36,651
Say this is the main branch and the time goes in the right direction.

115
00:06:36,651 --> 00:06:42,017
Branch off, do your task, work on it, and eventually you say,

116
00:06:42,017 --> 00:06:45,221
OK, I'm ready to merge back to main.

117
00:06:45,221 --> 00:06:49,665
But before you do that, you run an automated test

118
00:06:49,665 --> 00:06:52,528
that verifies that you didn't actually break anything.

119
00:06:55,763 --> 00:06:59,424
有在用Fargo管理的人應該都對這張圖不會太陌生

120
00:06:59,424 --> 00:07:00,965
如果你要做新功能,還是你要加新東西

121
00:07:00,965 --> 00:07:02,245
你應該自己開一個新的branch

122
00:07:02,245 --> 00:07:05,226
然後branch就是分支

123
00:07:05,226 --> 00:07:08,907
在你自己的電腦上確定可以執行,測試都過了

124
00:07:08,907 --> 00:07:10,567
沒有其他奇怪的問題發現

125
00:07:10,567 --> 00:07:17,109
你才會把你的分支merge回主要的那條主線裡面

126
00:07:19,133 --> 00:07:26,977
So instead of merging this yourself, you would press a button somewhere and then an automated process would start.

127
00:07:26,977 --> 00:07:33,460
And when it comes back everything green, then it would automatically merge it for you. You don't have to press anything anymore.

128
00:07:34,851 --> 00:07:38,153
那理想的狀況就是說你在做merge之前

129
00:07:38,153 --> 00:07:39,714
應該就要用類似像這樣的工具

130
00:07:39,714 --> 00:07:43,857
去跑完所有的測試跟建置流程

131
00:07:43,857 --> 00:07:46,919
自動跑完這個程序之後確定沒問題

132
00:07:46,919 --> 00:07:48,440
你才去把它merge回去

133
00:07:48,440 --> 00:07:50,301
就不用手動做這件事情

134
00:07:50,301 --> 00:07:52,723
另一個我們可以自動化的地方是

135
00:07:52,723 --> 00:07:54,724
當你做建築的時候

136
00:07:54,724 --> 00:07:57,826
你可能會想要推廣到玩家、測試者

137
00:08:04,057 --> 00:08:06,679
even your internal team.

138
00:08:06,679 --> 00:08:12,122
So you have to make these builds for all the platforms that you support

139
00:08:12,122 --> 00:08:14,504
and then upload them to whatever store it is

140
00:08:14,504 --> 00:08:15,885
and you can also automate that.

141
00:08:17,020 --> 00:08:20,563
另外一個可以自動化的部分就是

142
00:08:20,563 --> 00:08:22,664
你在確定你的Build沒有問題之後

143
00:08:22,664 --> 00:08:24,706
但你還是要給真人去玩

144
00:08:24,706 --> 00:08:27,147
這個真人可能是在你團隊裡面的測試員

145
00:08:27,147 --> 00:08:29,769
或是說其他的Beta的玩家

146
00:08:29,769 --> 00:08:33,192
或是其他不同平台的玩家

147
00:08:33,192 --> 00:08:35,794
送到不同的地方或不同的平台上去

148
00:08:35,794 --> 00:08:38,796
這件事情也是可以被自動化的

149
00:08:38,796 --> 00:08:42,319
所以比如說在Subnautica的過程中

150
00:08:42,319 --> 00:08:45,521
我們有5,000個Build上載到Steam

151
00:08:47,638 --> 00:08:53,001
他們都在Valve的伺服器上

152
00:08:53,001 --> 00:08:55,623
如果你想再回到某個版本,你都可以

153
00:08:55,623 --> 00:09:06,949
這個畫面就是Starmulio的Steam Build過去曾經送給松巴的經歷

154
00:09:08,103 --> 00:09:11,384
Steam 裡面會把所有你送過的版本都保留一份下來

155
00:09:11,384 --> 00:09:12,684
所以如果你發現任何問題

156
00:09:12,684 --> 00:09:17,606
你可以隨時退回其中某一個版本

157
00:09:17,606 --> 00:09:19,447
這有點太複雜了

158
00:09:19,447 --> 00:09:23,968
像是推薦到Xbox或PlayStation

159
00:09:23,968 --> 00:09:26,609
或其他商店因為他們有些手動步驟

160
00:09:26,609 --> 00:09:30,230
但Steam 我們可以自行自行自行

161
00:09:30,230 --> 00:09:31,650
這非常好

162
00:09:31,650 --> 00:09:32,131
你不會有討論

163
00:09:32,131 --> 00:09:34,211
例如它在我的機器上運作

164
00:09:34,211 --> 00:09:36,012
但它在你的機器上運作,那有什麼問題呢?

165
00:09:37,659 --> 00:09:41,682
這是大家可以玩的建築

166
00:09:41,682 --> 00:09:44,764
其他非Steam的平台

167
00:09:44,764 --> 00:09:47,106
中間可能會有一些手動程序

168
00:09:47,106 --> 00:09:53,490
但是Steam的部分是可以完全自動化的

169
00:09:53,490 --> 00:09:55,471
以上就是為什麼不斷進行的組合是一個好主意

170
00:09:59,137 --> 00:10:01,820
有些問題可能你也有考慮過

171
00:10:01,820 --> 00:10:11,609
所以在講座後,我會很高興回答你的問題

172
00:10:11,609 --> 00:10:12,310
我們會嗎?

173
00:10:12,310 --> 00:10:13,091
剛剛這樣子

174
00:10:13,091 --> 00:10:14,993
大概講述的用途是

175
00:10:14,993 --> 00:10:18,076
常見的CI使用情境

176
00:10:18,076 --> 00:10:20,518
如果你有想到其他的情況

177
00:10:20,518 --> 00:10:21,399
或是你覺得你其實

178
00:10:22,087 --> 00:10:24,168
If you have similar needs in other fields,

179
00:10:24,168 --> 00:10:27,589
you can come to us after today's session

180
00:10:27,589 --> 00:10:28,689
and talk to him.

181
00:10:28,689 --> 00:10:29,929
And so, in the survey,

182
00:10:29,929 --> 00:10:37,591
what you want me to talk about,

183
00:10:37,591 --> 00:10:40,112
I also asked like

184
00:10:40,112 --> 00:10:42,732
who's using version control already

185
00:10:42,732 --> 00:10:46,633
and it turns out basically everyone is using

186
00:10:46,633 --> 00:10:48,354
some form of version control.

187
00:10:48,354 --> 00:10:50,314
Lots of people are using GitHub.

188
00:10:50,742 --> 00:10:53,105
This example is for the use case.

189
00:10:53,105 --> 00:10:58,873
I'm more familiar with plastic, which is this thing,

190
00:10:58,873 --> 00:11:02,518
but at the end of the day, it really doesn't matter.

191
00:11:02,518 --> 00:11:05,942
We can make Jenkins talk to any version control system.

192
00:11:06,656 --> 00:11:10,237
在Jonas去年發的問卷裡面

193
00:11:10,237 --> 00:11:12,677
絕大部分的人對

194
00:11:12,677 --> 00:11:14,498
版本控制這個概念

195
00:11:14,498 --> 00:11:16,118
或是說版本控制相關的工具

196
00:11:16,118 --> 00:11:19,199
其實都已經有在使用或是已經相當熟悉了

197
00:11:19,199 --> 00:11:21,279
那這絕大部分應該是用Git

198
00:11:21,279 --> 00:11:24,140
所以今天講的內容是Jankie's跟Git的配合

199
00:11:24,140 --> 00:11:25,780
Jonas自己是用

200
00:11:25,780 --> 00:11:29,301
工作上的商業方案是用Plastic MC

201
00:11:30,284 --> 00:11:34,265
不過他講到說,Plexi XEM跟KIT基本上

202
00:11:34,265 --> 00:11:37,807
到最後目的都一樣,用法其實也相當接近

203
00:11:37,807 --> 00:11:39,207
概念都是相當接近

204
00:11:39,207 --> 00:11:43,229
JAMming是可以跟各種不同的辦公系統配合

205
00:11:43,229 --> 00:11:43,849
所以應該不會有什麼問題

206
00:11:43,849 --> 00:11:47,030
OK, so how it works is

207
00:11:47,030 --> 00:11:51,612
you want to have some sort of built-in

208
00:11:51,612 --> 00:11:56,994
that can be just an old laptop or computer or something that you have

209
00:11:57,770 --> 00:12:05,677
Preferably not your own machine because you want to have that run in Unity and not affect

210
00:12:05,677 --> 00:12:08,860
your own work, not make your own PC slow.

211
00:12:08,860 --> 00:12:13,705
But if you can't have your own machine and run it overnight, it's also fine.

212
00:12:15,529 --> 00:12:19,232
在安裝Streaming之前

213
00:12:19,232 --> 00:12:22,856
或是開始做今天workshop內容之前

214
00:12:22,856 --> 00:12:23,917
最好找一台空電腦或舊電腦

215
00:12:23,917 --> 00:12:26,479
現在已經沒有正式在使用的來安裝比較適合

216
00:12:26,479 --> 00:12:30,143
因為基本上這個東西會一直在背景執行

217
00:12:30,143 --> 00:12:31,944
如果你平常要用那台電腦的話

218
00:12:31,944 --> 00:12:34,186
它會在背景裡面一直定期跑

219
00:12:34,186 --> 00:12:36,769
這樣對你應該會造成蠻多的困擾

220
00:12:36,769 --> 00:12:37,169
所以通常

221
00:12:38,077 --> 00:12:39,839
需要自動化的建設流程的時候

222
00:12:39,839 --> 00:12:41,440
都是會另外找一台專用機器

223
00:12:41,440 --> 00:12:43,322
就算是舊的也沒關係

224
00:12:43,322 --> 00:12:46,184
總之它是整理過比較乾淨的

225
00:12:46,184 --> 00:12:47,045
我順便再補充一下

226
00:12:47,045 --> 00:12:51,468
現在畫面上看到的是英文版本的Docker資料

227
00:12:51,468 --> 00:12:54,631
但是如果你去Docker的話

228
00:12:54,631 --> 00:12:55,351
它下面都有翻譯連結

229
00:12:55,351 --> 00:12:56,252
現在翻譯中的翻譯

230
00:12:56,252 --> 00:13:00,816
是在同樣的Repository裡面可以看到

231
00:13:00,816 --> 00:13:03,578
所以如果你有現在在開Docker的話

232
00:13:03,578 --> 00:13:04,759
可以直接去看翻譯中的翻譯

233
00:13:08,383 --> 00:13:15,905
Right, so you have a computer, you install Jenkins, that's fairly straightforward.

234
00:13:15,905 --> 00:13:21,727
There's a Windows installer, it's linked in the project here.

235
00:13:21,727 --> 00:13:29,009
And once you've installed Jenkins on your machine, you go to localhost 8080.

236
00:13:29,009 --> 00:13:32,330
Where is it? Yeah, localhost 8080.

237
00:13:32,330 --> 00:13:33,090
What you see is this, right?

238
00:13:34,955 --> 00:13:38,236
Jenkins 的安裝連結在這個頁面上

239
00:13:38,236 --> 00:13:39,637
我們有放一個超頁解構過去

240
00:13:39,637 --> 00:13:42,398
基本上就是把板子做一系統用的版本

241
00:13:42,398 --> 00:13:45,239
抓下來然後執行

242
00:13:45,239 --> 00:13:50,382
拋下來之後會是一個在你電腦上配置執行的Server

243
00:13:50,382 --> 00:13:53,183
它的Server 經常開在Logos上面

244
00:13:53,183 --> 00:13:54,763
Port 現在是8080

245
00:13:54,763 --> 00:14:00,306
所以如果你現在切到Logos的Tab

246
00:14:00,306 --> 00:14:01,566
如果你正常安裝好之後

247
00:14:01,566 --> 00:14:02,927
你的 Jenkins 應該就會正常拋下來

248
00:14:04,163 --> 00:14:06,205
如果你想繼續,可以下載並安裝現在

249
00:14:06,205 --> 00:14:07,205
不用擔心無法安裝

250
00:14:07,205 --> 00:14:10,227
很容易刪除檔案,沒有缺口

251
00:14:10,227 --> 00:14:14,049
如果想直接測試,之前沒有用過的話

252
00:14:14,049 --> 00:14:17,751
可以直接到 GitHub 連結下載到其他裝置

253
00:14:17,751 --> 00:14:20,913
到時候要砍掉的話很簡單,砍掉資料再直接砍就好

254
00:14:20,913 --> 00:14:22,034
OK,所以我們把它安裝好

255
00:14:34,395 --> 00:14:37,437
我們想要創造新的工作

256
00:14:37,437 --> 00:14:41,982
給它名字

257
00:14:41,982 --> 00:14:42,822
或是工作

258
00:14:42,822 --> 00:14:48,087
選擇Pipeline Project

259
00:14:48,087 --> 00:14:50,189
因為Pipeline是

260
00:14:50,189 --> 00:14:52,632
我們最有控制的

261
00:14:52,632 --> 00:14:56,455
在他建立新工作的介面裡面

262
00:14:56,455 --> 00:14:58,217
就選擇輸入他們的專案名稱

263
00:14:59,587 --> 00:15:02,689
就是工作名稱之後我們就選Pipeline這個選項

264
00:15:02,689 --> 00:15:08,194
Pipeline通常在實際實戰上面之後最常用到

265
00:15:08,194 --> 00:15:08,474
然後你的控制權也比較多的一個選項

266
00:15:08,474 --> 00:15:10,896
There's a lot of stuff to configure

267
00:15:10,896 --> 00:15:17,341
We're going to ignore all that

268
00:15:17,341 --> 00:15:19,503
It's not very important

269
00:15:19,503 --> 00:15:22,245
What really is important is this

270
00:15:22,245 --> 00:15:26,588
We want a pipeline script from the version control system

271
00:15:28,113 --> 00:15:33,301
這是Git的管理系統

272
00:15:33,301 --> 00:15:38,249
在設定預設的工作樣板之後

273
00:15:38,249 --> 00:15:41,233
上面很多打工的選項

274
00:15:41,233 --> 00:15:42,054
絕大部分在

275
00:15:43,093 --> 00:15:46,814
現在常用的專案大部分是不重要的

276
00:15:46,814 --> 00:15:48,775
可以先跳過,先把專案跑起來比較重要

277
00:15:48,775 --> 00:15:51,536
先把工作跑起來比較重要

278
00:15:51,536 --> 00:15:57,219
唯一的關鍵是我們現在是要跑Pipeline的腳本

279
00:15:57,219 --> 00:16:02,401
而且是要從版本控制的資料夾裡面

280
00:16:02,401 --> 00:16:05,923
去跑Pipeline檔案

281
00:16:07,637 --> 00:16:17,146
So if you're using a GitHub desktop or anything GitHub, you already know how to get the repository URL.

282
00:16:17,146 --> 00:16:26,254
I think it's somewhere here.

283
00:16:26,254 --> 00:16:29,657
Yeah, this URL. Take that.

284
00:16:29,657 --> 00:16:31,739
Put it over here.

285
00:16:33,728 --> 00:16:39,792
我用的是公開的資料庫,所以我不需要有登入

286
00:16:39,792 --> 00:16:44,534
如果是私人資料庫,可以直接輸入

287
00:16:44,534 --> 00:16:48,876
你自己的DATE儲存庫裡面

288
00:16:48,876 --> 00:16:52,558
就把DATE檔的UIL

289
00:17:00,250 --> 00:17:01,671
複製技能就好了

290
00:17:01,671 --> 00:17:03,231
如果你的Git是公開的

291
00:17:03,231 --> 00:17:05,372
就不用設任何Credential

292
00:17:05,372 --> 00:17:06,493
也不用設任何帳號密碼

293
00:17:06,493 --> 00:17:10,074
但如果是私人的Git server

294
00:17:10,074 --> 00:17:13,115
帳號密碼就自己設定

295
00:17:13,115 --> 00:17:14,996
目前還是展示

296
00:17:14,996 --> 00:17:19,678
在這個Workshop資料庫的資料夾裡面

297
00:17:19,678 --> 00:17:21,979
有的不只是Readme說明

298
00:17:21,979 --> 00:17:23,319
是連Unity的翻譯專案

299
00:17:23,319 --> 00:17:25,240
跟Jankins的翻譯專案

300
00:17:25,240 --> 00:17:26,941
都在裡面

301
00:17:26,941 --> 00:17:28,221
所以是完全Follow這個

302
00:17:29,252 --> 00:17:40,557
In the workshop, you can go to the GitHub repository of the workshop prepared by Jonas.

303
00:17:40,557 --> 00:17:47,120
You can find the corresponding files directly on GitHub.

304
00:17:47,120 --> 00:17:52,003
In my project, I've already put a Janus file into the repository.

305
00:17:52,924 --> 00:18:00,654
It looks roughly like this and what I would recommend to you is just copy it because all

306
00:18:00,654 --> 00:18:06,021
you have to do is change these things to whatever you're using on your machine but then the

307
00:18:06,021 --> 00:18:08,143
rest of the script is always the same.

308
00:18:10,502 --> 00:18:16,764
建議如果你要直接使用Workshop的內容

309
00:18:16,764 --> 00:18:19,124
這個版本的Jetkins設定的話

310
00:18:19,124 --> 00:18:21,865
直接把這個檔案的內容全部複製下來就可以了

311
00:18:21,865 --> 00:18:24,446
唯一要修改的部分是前面的環境

312
00:18:24,446 --> 00:18:26,687
執行環境與發問的部分

313
00:18:26,687 --> 00:18:29,407
你的Git或是你的應用體可能掛在不一樣的地方

314
00:18:29,407 --> 00:18:31,868
或是你的抓謎程度不一樣

315
00:18:31,868 --> 00:18:36,109
前面那些可能要稍微仔細設定一下

316
00:18:36,109 --> 00:18:38,750
它上面還有預設Steam的

317
00:18:39,610 --> 00:18:42,572
帳號密碼或是說Stream的目錄

318
00:18:42,572 --> 00:18:46,316
或者是如果你今天是要發佈到其他不同平台

319
00:18:46,316 --> 00:18:50,019
一些相關東西,那個變數名稱等於自己要加

320
00:18:50,019 --> 00:18:51,780
下面那些Stage

321
00:18:51,780 --> 00:18:55,564
就是下面的整個Jetkins的執行流程

322
00:18:55,564 --> 00:18:56,044
基本上不變

323
00:18:56,044 --> 00:19:01,549
OK, so I put this in here, that in there

324
00:19:01,549 --> 00:19:05,052
And that's basically it, let's try it, if it works

325
00:19:06,374 --> 00:19:08,375
剛剛把這東西設置起來之後,它應該就可以自動跑了

326
00:19:08,375 --> 00:19:18,925
So the good news is, I found the Jenkins file.

327
00:19:18,925 --> 00:19:23,770
The path is correct, the repository is correct.

328
00:19:23,770 --> 00:19:26,732
And while this is going,

329
00:19:26,732 --> 00:19:29,315
we can look at the log file.

330
00:19:37,953 --> 00:19:41,894
左邊是Pipeline

331
00:19:41,894 --> 00:19:42,835
是指個人的步驟

332
00:19:42,835 --> 00:19:46,736
右邊是建立程序的操作輸出

333
00:19:46,736 --> 00:19:48,257
所有的須要的程序

334
00:19:48,257 --> 00:19:54,459
對,因為JAMMIN是直接跑一個伺服器在你的本機上

335
00:19:54,459 --> 00:19:56,420
或是你到處找一個專用的機器

336
00:19:56,420 --> 00:19:59,501
它就是跑一台伺服器專門去做這件事情

337
00:19:59,501 --> 00:20:00,801
在伺服器上跑的操作資訊

338
00:20:00,801 --> 00:20:04,263
就是它在建立的過程中會出現所有的通知訊息

339
00:20:05,170 --> 00:20:08,833
and the alarm will be sent immediately.

340
00:20:08,833 --> 00:20:12,895
The steps you see on the left, you can go down step by step.

341
00:20:12,895 --> 00:20:14,156
Time will go down slowly.

342
00:20:14,156 --> 00:20:16,478
If the log is actually jumping out from the side,

343
00:20:16,478 --> 00:20:19,199
you can open the log's monitor window,

344
00:20:19,199 --> 00:20:19,900
and it will jump out.

345
00:20:19,900 --> 00:20:22,582
So you normally don't see this stuff.

346
00:20:22,582 --> 00:20:24,963
This is a Unity output that goes into an editor log file

347
00:20:24,963 --> 00:20:26,884
somewhere deep in your system.

348
00:20:26,884 --> 00:20:28,085
But for the build process,

349
00:20:28,085 --> 00:20:29,126
we're redirecting it to Jenkins

350
00:20:29,126 --> 00:20:32,288
so that we can see live what the build server is doing.

351
00:20:32,288 --> 00:20:33,088
Even when we're...

352
00:20:34,357 --> 00:20:36,277
不是在機器上的實際情況

353
00:20:36,277 --> 00:20:41,919
如果你在網路上,與我的機器連接

354
00:20:41,919 --> 00:20:43,039
或是8080

355
00:20:43,039 --> 00:20:45,420
你會看到這個

356
00:20:45,420 --> 00:20:49,201
這個東西就是平常你自己在用Munity

357
00:20:49,201 --> 00:20:50,881
建制專案或是測試專案的時候

358
00:20:50,881 --> 00:20:53,442
本來就會跑一些log跟資訊

359
00:20:53,442 --> 00:20:55,162
通常這個東西可能大部分都會被影響起來

360
00:20:58,184 --> 00:21:02,346
在 Jenkins 這邊,他把所有的刻意備忘錄下來

361
00:21:02,346 --> 00:21:06,409
全部都 Redirect 出來到這個 server 的 console 界面上

362
00:21:06,409 --> 00:21:11,892
如果你現在可以直接連到 local IP 的 body line

363
00:21:11,892 --> 00:21:14,873
直接對聯到這段式的 server 上

364
00:21:14,873 --> 00:21:16,014
應該可以看到相關的資訊在這裡

365
00:21:16,014 --> 00:21:19,236
其實可以試試看

366
00:21:19,236 --> 00:21:22,678
大家可以連接到 SIP 4888

367
00:21:22,678 --> 00:21:25,339
也許我有些檔案會失去

368
00:21:27,589 --> 00:21:30,150
如果有人想要測試的話可以給他們看192.168.102.33

369
00:21:30,150 --> 00:21:32,111
8080不知道會看到什麼

370
00:21:32,111 --> 00:21:37,235
如果沒有用的話給我一個讚

371
00:21:37,235 --> 00:21:41,397
如果沒有用的話給我一個讚

372
00:21:41,397 --> 00:21:41,537
我會繼續測試

373
00:21:41,537 --> 00:21:42,898
總之現在就是要等它跑完

374
00:21:42,898 --> 00:21:44,799
如果有人想要花幾秒鐘試一下

375
00:21:44,799 --> 00:21:49,022
可以試看看

376
00:21:49,022 --> 00:21:49,702
不過我還有

377
00:21:49,702 --> 00:21:51,103
線跟無線網路的區段沒有存檯

378
00:21:51,103 --> 00:21:52,424
所以我不知道

379
00:21:54,094 --> 00:22:01,457
Oh, I forgot one thing. When you go to that website, 8080, you are asked to log in.

380
00:22:01,457 --> 00:22:10,401
The Jenkins installation process says your initial Jenkins password is in this file

381
00:22:10,401 --> 00:22:14,242
and your Jenkins installation secrets initial admin password.

382
00:22:14,242 --> 00:22:15,063
So you can copy it from there.

383
00:22:16,691 --> 00:22:19,694
如果你之前有用過GemCache的話

384
00:22:19,694 --> 00:22:20,314
現在才安裝的話

385
00:22:20,314 --> 00:22:21,976
你會發現第一次跑伺服器的時候

386
00:22:21,976 --> 00:22:25,639
伺服器會叫你去找一個預設生成密碼

387
00:22:25,639 --> 00:22:27,841
你要先把預設生成密碼填進去

388
00:22:27,841 --> 00:22:29,202
在你本機上網的位置

389
00:22:29,202 --> 00:22:32,805
它在Store的畫面上會跟你講

390
00:22:32,805 --> 00:22:35,847
你就是把那個密碼貼進去之後才能開始正式安裝過程

391
00:22:35,847 --> 00:22:38,089
看來我們很幸運

392
00:22:38,089 --> 00:22:39,050
一切都成功了

393
00:22:39,050 --> 00:22:40,571
最長的程度是

394
00:22:44,926 --> 00:22:47,508
for the project to get imported

395
00:22:47,508 --> 00:22:49,129
the import asset step in Unity

396
00:22:49,129 --> 00:22:51,791
where it's actually the progress bar

397
00:22:51,791 --> 00:22:55,353
and then to actually build a stand-alone executable

398
00:22:55,353 --> 00:23:00,136
and then this last step where it would upload to Steam

399
00:23:00,136 --> 00:23:01,217
that's just fake right now

400
00:23:01,217 --> 00:23:09,542
it's not actually uploading anything to anywhere

401
00:23:09,542 --> 00:23:12,945
Let's have a look at the Jenkins file

402
00:23:12,945 --> 00:23:13,765
剛剛Jonas講說

403
00:23:14,639 --> 00:23:17,821
會跑比較久的幾個步驟,其中一個是Import Session

404
00:23:17,821 --> 00:23:20,843
Import Session那邊是

405
00:23:20,843 --> 00:23:22,205
你在硬體開作案起來的時候

406
00:23:22,205 --> 00:23:24,146
如果是重新開一次的話

407
00:23:24,146 --> 00:23:28,610
它都會有一些像Package之類的Import程序

408
00:23:28,610 --> 00:23:30,972
那個東西就是JKX會真的去跑這個東西

409
00:23:30,972 --> 00:23:32,012
然後真的去做單元測試

410
00:23:32,012 --> 00:23:33,954
然後真的去做建置

411
00:23:33,954 --> 00:23:37,637
然後建置完之後就會有真正可以用的執行檔

412
00:23:37,637 --> 00:23:38,898
那執行檔如果你是在本機

413
00:23:40,120 --> 00:23:42,140
設定你的Jetkins Server的話

414
00:23:42,140 --> 00:23:43,921
它就會存在你本機本網的部分

415
00:23:43,921 --> 00:23:46,681
可能是在Jetkins的相關資料夾裡面

416
00:23:46,681 --> 00:23:47,021
最後一步驟

417
00:23:47,021 --> 00:23:49,562
它剛剛的UploadView其實有跑完

418
00:23:49,562 --> 00:23:51,663
但是如果現在看到右邊的畫面的話

419
00:23:51,663 --> 00:23:54,703
那個Stage UploadView的那邊

420
00:23:54,703 --> 00:23:57,104
那段指令目前是沒有作用的

421
00:23:57,104 --> 00:24:02,945
就是它的Steam指令跟Steam的帳號密碼當然是假的

422
00:24:02,945 --> 00:24:03,606
你可以看到上面

423
00:24:03,606 --> 00:24:07,006
它現在是用假的SteamUserName跟SteamPassword

424
00:24:07,006 --> 00:24:07,606
所以當然什麼都沒有說

425
00:24:08,842 --> 00:24:17,866
If you want to use it, you can go from the upload view,

426
00:24:17,866 --> 00:24:31,631
you can automatically upload it to the specified format.

427
00:24:41,287 --> 00:24:50,973
But we're not done. That's out of the scope for today. If you have questions about that, we can do another workshop for that.

428
00:24:50,973 --> 00:24:58,817
Now, I said that...

429
00:25:01,195 --> 00:25:09,022
One of the main reasons why we're doing all this is because we want to prevent this from happening.

430
00:25:09,022 --> 00:25:12,485
We want to detect that something broke.

431
00:25:12,485 --> 00:25:23,475
To do that, what we're actually doing in the script is we run the unit test.

432
00:25:23,475 --> 00:25:27,139
Running the unit test looks like...

433
00:25:31,766 --> 00:25:32,466
所以我們剛剛講到說

434
00:25:32,466 --> 00:25:36,208
到底會不會看我們剛剛做的範例流程

435
00:25:36,208 --> 00:25:38,130
為什麼要做這麼多事情

436
00:25:38,130 --> 00:25:39,791
那就是回到最開始講的

437
00:25:39,791 --> 00:25:43,713
我們想要避免那種莫名其妙材質跑掉

438
00:25:43,713 --> 00:25:46,175
還是說什麼東西突然間不能扛太好的狀況

439
00:25:46,175 --> 00:25:48,697
那這在多人合作的時候很容易發生

440
00:25:48,697 --> 00:25:51,319
那要防止這樣的情況出現

441
00:25:51,319 --> 00:25:55,541
除了把你剛剛的 Jenkins 這樣建立建置好之外

442
00:25:55,541 --> 00:25:57,323
最重要的其實是要考裡面那個單元測試的步驟

443
00:26:03,809 --> 00:26:06,551
Luckily, Unity has a function.

444
00:26:06,551 --> 00:26:13,156
You can start Unity from the command line and say, if you

445
00:26:13,156 --> 00:26:14,457
run unit test, it works.

446
00:26:14,457 --> 00:26:16,419
Here we say, build a player.

447
00:26:16,419 --> 00:26:18,140
And it does the right thing.

448
00:26:18,140 --> 00:26:23,084
And if the unit test had any problem, then this

449
00:26:23,084 --> 00:26:24,085
build step would fail.

450
00:26:24,085 --> 00:26:29,188
Let's try to create a problem and see if that fails.

451
00:26:30,207 --> 00:26:35,611
Unity的Command Line命令列的操作模式

452
00:26:35,611 --> 00:26:37,713
是可以下不同的參數

453
00:26:37,713 --> 00:26:40,375
你可以下現在只是要run editor的測試

454
00:26:40,375 --> 00:26:43,498
或是你現在要run特定的不同的階段

455
00:26:43,498 --> 00:26:45,960
還是你要真的build最後的版本

456
00:26:45,960 --> 00:26:48,261
你可以下不同的參數去決定

457
00:26:48,261 --> 00:26:49,943
目前就是Jonas想要試一下

458
00:26:49,943 --> 00:26:53,045
如果我故意把這個狀況改爛

459
00:26:53,045 --> 00:26:56,608
那看它有沒有真的在Unity testing的階段會掛掉

460
00:26:59,867 --> 00:27:02,928
如果他不喜歡,網路應用程式會改變

461
00:27:02,928 --> 00:27:06,170
所以我不會用我的專業能力來做這個演講

462
00:27:06,170 --> 00:27:12,673
我們來看看會不會成功

463
00:27:12,673 --> 00:27:17,455
這個問題是大中華區獨有的問題

464
00:27:17,455 --> 00:27:19,536
坐在這邊有在用的應該都知道

465
00:27:19,536 --> 00:27:24,879
就是你的個人版的證書

466
00:27:24,879 --> 00:27:26,160
每過七天就要去重新按一次

467
00:27:27,672 --> 00:27:29,953
如果你BTFB它跳進去的話

468
00:27:29,953 --> 00:27:31,354
結果可以採Portable

469
00:27:31,354 --> 00:27:31,575
那就麻煩了

470
00:27:31,575 --> 00:27:38,740
Give it a little moment

471
00:27:38,740 --> 00:27:39,961
Yes, question

472
00:27:39,961 --> 00:27:42,223
Can you enlarge the front?

473
00:27:42,223 --> 00:27:43,324
It's a bit hard to see

474
00:27:43,324 --> 00:27:44,184
Sorry, I cannot hear you

475
00:27:44,184 --> 00:27:47,487
No, can you enlarge the front?

476
00:27:47,487 --> 00:27:48,368
Make it bigger

477
00:27:48,368 --> 00:27:50,409
Probably the easiest would be

478
00:27:50,409 --> 00:27:52,471
No, I shouldn't do that, right?

479
00:27:52,471 --> 00:27:55,893
I shouldn't change the resolution

480
00:27:57,164 --> 00:27:59,426
And the stream breaks and stuff?

481
00:27:59,426 --> 00:28:00,326
No, I'm not doing it.

482
00:28:00,326 --> 00:28:01,627
Sorry.

483
00:28:01,627 --> 00:28:06,011
But if you're on the browser, you can just control path here.

484
00:28:06,011 --> 00:28:06,451
Yeah.

485
00:28:06,451 --> 00:28:12,416
Yeah, this is a good idea.

486
00:28:12,416 --> 00:28:15,758
Yeah, apologies if it's a little bit small, I think.

487
00:28:15,758 --> 00:28:17,399
Are we going to record the stream?

488
00:28:17,399 --> 00:28:17,860
Yeah.

489
00:28:17,860 --> 00:28:22,443
Yeah, so you can re-watch it on YouTube or something.

490
00:28:22,443 --> 00:28:23,524
If any of this is too small.

491
00:28:26,518 --> 00:28:28,959
In Unity I cannot make it bigger, I'm sorry.

492
00:28:28,959 --> 00:28:34,162
Okay, so we have in this project, in this demo project for this workshop,

493
00:28:34,162 --> 00:28:36,364
I've put two unit tests in there.

494
00:28:36,364 --> 00:28:41,046
One is...

495
00:28:41,046 --> 00:28:53,954
It doesn't look like the latest version.

496
00:28:53,954 --> 00:28:54,094
Aha, okay.

497
00:29:05,305 --> 00:29:09,527
I have a generic test for asset bundles and a test for shaders.

498
00:29:09,527 --> 00:29:15,530
We're going to destroy the test for asset bundles and see what happens.

499
00:29:15,530 --> 00:29:20,291
So the test for asset bundles is...

500
00:29:20,291 --> 00:29:23,053
The idea is basically, you have some materials...

501
00:29:23,053 --> 00:29:26,374
When you put stuff in asset bundles,

502
00:29:26,374 --> 00:29:31,656
you can run into a problem

503
00:29:31,656 --> 00:29:33,997
where assets get duplicated.

504
00:29:36,929 --> 00:29:38,750
我會展示這個,然後讓測試失敗

505
00:29:38,750 --> 00:29:39,791
然後再建造一次

506
00:29:39,791 --> 00:29:47,517
通過 Jenkins 看到建造流程停止

507
00:29:47,517 --> 00:29:52,661
然後再跟我們報告,它不再運作

508
00:29:52,661 --> 00:30:00,386
現在Translator要做一點測試S8的內容修改

509
00:30:00,386 --> 00:30:00,627
呼,頭好暈

510
00:30:03,790 --> 00:30:09,414
他說在XML常見的問題是

511
00:30:09,414 --> 00:30:13,296
有時候材質或內容會莫名其妙的

512
00:30:13,296 --> 00:30:18,000
在幾次變更之後自己複製一份

513
00:30:18,000 --> 00:30:19,841
有時候這樣會造成一些衝突

514
00:30:19,841 --> 00:30:23,544
他現在模擬一些類似的情況

515
00:30:23,544 --> 00:30:25,765
如果故意做這樣的修改之後

516
00:30:25,765 --> 00:30:28,887
是不是在Jenkins那邊自動review的過程

517
00:30:28,887 --> 00:30:30,829
他就會自動fail那一刻

518
00:30:33,470 --> 00:30:41,076
Okay, so let's say I have a few textures, and I have a few materials, and I set up a PVC.

519
00:30:41,076 --> 00:30:45,440
Very simple.

520
00:30:45,440 --> 00:30:51,506
And I put these materials into an asset bundle.

521
00:30:51,506 --> 00:30:52,406
Like this.

522
00:30:52,406 --> 00:30:52,887
So, portals.

523
00:30:54,696 --> 00:31:01,558
Now I have an asset bundle, or I build an asset bundle with these three materials,

524
00:31:01,558 --> 00:31:16,061
and because they reference these textures, those textures would also be packed into the asset bundle portals.

525
00:31:16,061 --> 00:31:19,342
Who's using asset bundles yet?

526
00:31:19,342 --> 00:31:21,303
It's just an example.

527
00:31:21,303 --> 00:31:23,983
If I have another material,

528
00:31:24,658 --> 00:31:29,059
also references the same texture and put that in a different asset bundle.

529
00:31:29,059 --> 00:31:33,039
I don't know. So not again.

530
00:31:33,039 --> 00:31:42,121
Now I have the same texture, which is this one, referenced in two different asset bundles,

531
00:31:42,121 --> 00:31:47,242
and Unity gets very confused in which asset bundle this texture should get packed.

532
00:31:47,242 --> 00:31:51,843
So it just packs it in both asset bundles, and now you have the same texture.

533
00:31:53,401 --> 00:31:58,065
會在你的項目中重複一次

534
00:31:58,065 --> 00:32:01,769
重複吃掉你的記憶體

535
00:32:01,769 --> 00:32:02,930
這個特定問題是

536
00:32:02,930 --> 00:32:04,192
他現在在示範的特定問題是說

537
00:32:05,225 --> 00:32:08,686
它有三個貼圖裡面其中一個

538
00:32:08,686 --> 00:32:12,288
被包含到兩個不同的SF方程

539
00:32:12,288 --> 00:32:15,889
所以它A跟A2是在兩個不同的SF方程裡面

540
00:32:15,889 --> 00:32:18,950
在這種情況下,硬體會有點混亂

541
00:32:18,950 --> 00:32:23,371
基本上它會讓那個貼圖被

542
00:32:23,371 --> 00:32:25,792
多複製一次到不同的SF方程裡面

543
00:32:31,277 --> 00:32:34,639
你不能讀到,因為很小

544
00:32:34,639 --> 00:32:36,539
它說這個質量,CoreLit 01,就是這個

545
00:32:36,539 --> 00:32:43,782
是用兩個asset bundle來複製的,這不是一個好主意

546
00:32:43,782 --> 00:32:45,802
總之就是現在他自己已經偵測到

547
00:32:45,802 --> 00:32:49,284
Fuzion Asset的Duplicate

548
00:32:49,284 --> 00:32:50,764
就是Asset他自己被複製了一份

549
00:32:50,764 --> 00:32:54,946
那這邊在他的Test Run的時床裡面

550
00:32:54,946 --> 00:32:55,906
已經有出現警告訊息

551
00:32:57,787 --> 00:33:08,691
我們現在來檢查示範中

552
00:33:08,691 --> 00:33:12,353
現在把這個實際上目前確實是有初期版本

553
00:33:12,353 --> 00:33:15,814
直接送到Git

554
00:33:15,814 --> 00:33:21,436
就是你的Git server上面

555
00:33:21,436 --> 00:33:22,237
然後我們就看看

556
00:33:22,237 --> 00:33:23,737
因為剛剛的檢評是他的檔案

557
00:33:23,737 --> 00:33:25,818
裡面設定是說他要直接去GitHub上面

558
00:33:27,801 --> 00:33:32,363
這個專案拉下來去檢視試器

559
00:33:32,363 --> 00:33:38,365
所以我們剛剛做完這些假的模擬抽的操作之後

560
00:33:38,365 --> 00:33:41,066
我們要假裝把它放上去

561
00:33:41,066 --> 00:33:42,727
抽管放上去之後

562
00:33:42,727 --> 00:33:45,708
就看看是不是等一下在檢視裡面會出錯

563
00:33:45,708 --> 00:33:48,329
OK, now everything is on here

564
00:33:48,329 --> 00:33:52,751
and if we fail

565
00:33:56,230 --> 00:33:58,851
the project that we just made.

566
00:33:58,851 --> 00:34:05,533
This one workshop.

567
00:34:05,533 --> 00:34:06,053
A little bit.

568
00:34:06,053 --> 00:34:21,558
Let's have a look.

569
00:34:21,558 --> 00:34:21,758
Got it?

570
00:34:22,570 --> 00:34:28,732
Tickets use a different workspace and it's not the same workspace that I just opened.

571
00:34:28,732 --> 00:34:42,116
It's downloading the stuff there and it's importing the assets there.

572
00:34:42,116 --> 00:34:43,276
At least I hope it does.

573
00:34:50,412 --> 00:35:01,842
Like I said, I'm mostly using plastic, so I'm not 100% sure that I'm getting this, that it gets things right with like...

574
00:35:01,842 --> 00:35:04,044
Set, check out...

575
00:35:04,044 --> 00:35:06,046
I think it should work.

576
00:35:06,046 --> 00:35:12,692
Oh yeah, I've got some of the textures already.

577
00:35:12,692 --> 00:35:16,756
So it's done importing the assets.

578
00:35:20,217 --> 00:35:41,075
Now it's starting Unity again and running the unit test.

579
00:35:41,075 --> 00:35:42,356
Aha! Beautiful.

580
00:35:42,356 --> 00:35:47,901
As you can see on the left side, it failed.

581
00:35:49,994 --> 00:36:00,042
然後運行UnityX

582
00:36:00,042 --> 00:36:00,842
所以剛剛看到的是

583
00:36:00,842 --> 00:36:02,884
UnityX在單元測試裡面確實有出現錯誤

584
00:36:02,884 --> 00:36:09,949
然後過程就暫緩

585
00:36:09,949 --> 00:36:10,949
在這面出現錯誤的時候

586
00:36:10,949 --> 00:36:16,113
它可以直接跳到有錯誤的部分

587
00:36:16,113 --> 00:36:18,495
這樣就可以檢查出錯,到底哪邊出錯

588
00:36:22,672 --> 00:36:29,737
supposed to say a little bit nicer what failed in the log file, so that tells you, okay, what

589
00:36:29,737 --> 00:36:40,706
exactly broke. I'm not finding it right now, but it's there somewhere. And that's good

590
00:36:40,706 --> 00:36:41,667
enough for now, I think.

591
00:36:43,237 --> 00:36:44,498
Jemmy的錯誤訊息,跳出去有點長

592
00:36:44,498 --> 00:36:52,403
如果有compile error,還是像剛剛那樣sfbundle的錯誤

593
00:36:52,403 --> 00:36:56,626
可能要花點時間才能找到錯誤在哪邊

594
00:36:56,626 --> 00:36:58,727
但一般注意到一個錯誤,或是一個常見的錯誤

595
00:36:58,727 --> 00:36:59,427
理論上那個錯誤的關鍵字應該是

596
00:37:05,220 --> 00:37:09,681
你自己會有印象,或者是說你可以直接搜尋特定的時距

597
00:37:09,681 --> 00:37:12,122
然後就直接去看有沒有這個錯誤出現

598
00:37:12,122 --> 00:37:18,183
我應該要提醒大家,如果任何一個步驟失敗,其他步驟也不會被執行

599
00:37:18,183 --> 00:37:20,684
一般來說,這步驟只需要一分鐘,但現在只需要一秒鐘

600
00:37:20,684 --> 00:37:22,665
所以這步驟是跳過其他步驟

601
00:37:22,665 --> 00:37:25,465
所以如果你的雲端是好的,你不會上載一張被破壞的電腦,這很棒

602
00:37:35,434 --> 00:37:38,896
如果說剛在Intel的錯誤掛掉的話

603
00:37:38,896 --> 00:37:40,938
它Build那邊雖然還是有跑時間

604
00:37:40,938 --> 00:37:44,580
不過你可以注意到它的時間比剛剛成功的時候是短很多的

605
00:37:44,580 --> 00:37:47,963
原因就是因為它Build那段時間的效果

606
00:37:47,963 --> 00:37:50,564
它是跑一些基本流程

607
00:37:50,564 --> 00:37:56,368
那個時間搞不好是因為它要輸出各種Company Line的資訊

608
00:37:56,368 --> 00:37:57,889
所以才會有那個時間差距

609
00:37:57,889 --> 00:38:01,232
但基本上它是沒有真的執行到建置跟上傳的部分

610
00:38:05,652 --> 00:38:10,294
Yep, that's all the questions

611
00:38:10,294 --> 00:38:13,856
基本上就是今天展示的部分大概就到這邊

612
00:38:13,856 --> 00:38:16,077
你可以看到我們成功的跑完一次

613
00:38:16,077 --> 00:38:19,239
然後我們改了錯誤的東西

614
00:38:19,239 --> 00:38:21,440
就假裝好像真的是不小心改錯的東西

615
00:38:21,440 --> 00:38:23,020
進到自己的專案裡面

616
00:38:23,020 --> 00:38:25,441
然後這樣真的在跑

617
00:38:25,441 --> 00:38:28,843
確實也是它會跳錯誤出來

618
00:38:30,755 --> 00:38:35,337
Let's see if anyone has any questions after this.

619
00:38:35,337 --> 00:38:36,097
You can ask now.

620
00:38:36,097 --> 00:38:45,141
So actually I would just ask a question directly.

621
00:38:45,141 --> 00:38:50,463
Because I noticed that when you were showcasing the SFBundle errors,

622
00:38:50,463 --> 00:38:58,245
that SFBundle error showed up in, like, whoever was editing that SFBundle,

623
00:38:58,245 --> 00:38:59,106
that's...

624
00:39:00,020 --> 00:39:02,061
that person should already know this is an error.

625
00:39:02,061 --> 00:39:04,481
Right?

626
00:39:04,481 --> 00:39:07,042
Like this error here.

627
00:39:07,042 --> 00:39:11,423
Basically, he knows if he actually saves this file, and

628
00:39:11,423 --> 00:39:14,364
then he actually builds an asset bundle here, he will

629
00:39:14,364 --> 00:39:17,464
know that this is an error.

630
00:39:17,464 --> 00:39:22,465
Then under what kind of situation would this kind of

631
00:39:22,465 --> 00:39:27,306
error slip into the main repository?

632
00:39:27,306 --> 00:39:27,686
Right.

633
00:39:30,899 --> 00:39:37,805
There are some errors that are just stupid and shouldn't really slip if everyone was doing the job properly.

634
00:39:37,805 --> 00:39:43,850
And then there are some errors that are really difficult.

635
00:39:43,850 --> 00:39:51,777
Like, if I'm an artist and I'm replacing this texture or something,

636
00:39:51,777 --> 00:39:58,763
and I'm not super careful to preserve the meta file, then it gets a different ID.

637
00:39:59,889 --> 00:40:05,253
And something that references the texture, like this material,

638
00:40:05,253 --> 00:40:09,417
and some other folder completely on the other side of the project,

639
00:40:09,417 --> 00:40:11,858
would have a broken material.

640
00:40:11,858 --> 00:40:15,001
It looks like I've deleted it,

641
00:40:15,001 --> 00:40:18,404
and then this material here would be broken,

642
00:40:18,404 --> 00:40:21,806
and then later in the game, you would see an error.

643
00:40:21,806 --> 00:40:24,408
So just because you've changed something on this end,

644
00:40:24,408 --> 00:40:27,731
can mean that something on that end breaks.

645
00:40:27,731 --> 00:40:28,912
You've changed some code.

646
00:40:29,234 --> 00:40:35,056
some part breaks, you change some parts and code breaks, really like completely separate disciplines

647
00:40:35,056 --> 00:40:42,359
and it's very very difficult as the project grows to keep track of everything that could possibly

648
00:40:42,359 --> 00:40:49,102
break and that's why it's important to have automation that gives you the confidence that

649
00:40:49,102 --> 00:40:55,164
okay all the tests are green so at least I know that all of what we test didn't break.

650
00:40:56,260 --> 00:40:58,801
你的問題是,你真的測試了所有東西嗎?

651
00:40:58,801 --> 00:41:08,843
還是有些東西沒有被測試過?

652
00:41:08,843 --> 00:41:09,623
我剛剛的問題是想說

653
00:41:09,623 --> 00:41:14,344
以剛剛SFBundle的例子來說

654
00:41:14,344 --> 00:41:16,004
在操作這個過程中的人

655
00:41:16,004 --> 00:41:18,244
他應該在這個畫面就會看到

656
00:41:18,244 --> 00:41:20,125
就是有抽搐出來

657
00:41:20,125 --> 00:41:23,425
只是我是想說什麼情況下會造成

658
00:41:24,548 --> 00:41:28,350
他真的把有錯誤的版本送到你的公台

659
00:41:28,350 --> 00:41:34,533
或是說你的主要的Git的Server上面

660
00:41:34,533 --> 00:41:35,853
剛剛這個例子其實是比較誇張的例子

661
00:41:35,853 --> 00:41:38,574
他只是為了要趕快展示一下有錯誤的東西

662
00:41:38,574 --> 00:41:40,515
然後執行出去之後

663
00:41:40,515 --> 00:41:43,397
那JS執行真的會失敗

664
00:41:43,397 --> 00:41:45,237
另外一個可能性,像剛剛那個貼圖不見的問題

665
00:41:48,462 --> 00:41:52,324
那Title不見了會造成Unity就不能談話了

666
00:41:52,324 --> 00:41:54,985
還是說它執行起來就馬上可以看到錯誤

667
00:41:54,985 --> 00:41:57,146
因為搞不好畫面

668
00:41:57,146 --> 00:41:59,086
它剛好錯誤的部分就沒有呈現在畫面上

669
00:41:59,086 --> 00:42:01,787
你沒有辦法注意到哪個Title遺憲

670
00:42:01,787 --> 00:42:05,009
那樣子的東西有可能是

671
00:42:05,009 --> 00:42:06,429
A美術改了一個東西

672
00:42:06,429 --> 00:42:09,890
然後B程式去拉新的版本下來

673
00:42:09,890 --> 00:42:11,591
要更新美術固態的時候

674
00:42:11,591 --> 00:42:13,092
就發現什麼東西壞掉還是消失了

675
00:42:15,898 --> 00:42:22,723
這種情況下,你會需要寫更多的單元測試,去驗證有沒有類似的情況發生

676
00:42:22,723 --> 00:42:32,432
所以最後的關鍵是,你要把你曾經看過的錯誤都納入單元測試裡面

677
00:42:32,432 --> 00:42:37,136
至少你犯過一次的錯誤,透過自動化流程,讓你不會再犯第二次

678
00:42:38,219 --> 00:42:46,111
So, two very useful tests for us on Subnautica that we have in our project is one test runs

679
00:42:46,111 --> 00:42:51,820
across all the prefabs and checks all the components.

680
00:42:52,698 --> 00:42:55,339
如果有任何不足的資訊

681
00:42:55,339 --> 00:43:00,142
整個項目就要花半分鐘或兩分鐘

682
00:43:00,142 --> 00:43:03,144
視乎你擁有多少資料

683
00:43:03,144 --> 00:43:04,505
所以如果有任何問題

684
00:43:04,505 --> 00:43:11,830
所以Jonas說他們在Sanonica正式的專案裡面

685
00:43:11,830 --> 00:43:15,072
有兩個很有用的Dynamics測試

686
00:43:15,072 --> 00:43:16,693
其中一個

687
00:43:16,693 --> 00:43:18,094
第一個Dynamics測試就是說

688
00:43:18,094 --> 00:43:20,956
它去檢查所有整個專案裡面有沒有

689
00:43:22,130 --> 00:43:25,892
它的Material Element裡面有那種命名就變成Missing

690
00:43:25,892 --> 00:43:27,213
就是很明顯它東西就是不見

691
00:43:27,213 --> 00:43:31,676
那大概要花個半分鐘一分鐘去執行

692
00:43:31,676 --> 00:43:35,438
才能考完整個專案裡面所有的這個元件

693
00:43:35,438 --> 00:43:36,619
但是如果你找到的話就知道

694
00:43:36,619 --> 00:43:38,260
它Discount有改錯了

695
00:43:38,260 --> 00:43:41,903
所以它才會變成就是找不到素材或是找不到貼紙

696
00:43:41,903 --> 00:43:42,243
找不到材質這樣

697
00:43:50,730 --> 00:43:56,992
some field that other people have to fill out when they assign your component to a game object.

698
00:43:56,992 --> 00:44:01,594
Like, okay, you know, this always has to get linked.

699
00:44:01,594 --> 00:44:03,935
We have like an attribute which we slap on,

700
00:44:03,935 --> 00:44:09,238
and then we have a test that runs across all the prefabs,

701
00:44:09,238 --> 00:44:14,360
all the scripts, goes through all the fields in the script and checks.

702
00:44:14,859 --> 00:44:16,960
所有的東西,當它有這樣的特徵

703
00:44:16,960 --> 00:44:24,284
那麼這個必須在所有的prefab中被設定

704
00:44:24,284 --> 00:44:27,065
另外一個,第二個測試,剛剛講到很有用的測試

705
00:44:27,065 --> 00:44:30,267
他們有制定一個Unity的attribute

706
00:44:30,267 --> 00:44:32,668
然後他把這個attribute都放在

707
00:44:32,668 --> 00:44:35,170
那個元件的這些field前面

708
00:44:35,170 --> 00:44:37,331
那他就是去檢查說到底

709
00:44:38,248 --> 00:44:40,770
它有另外一個測試去跑說

710
00:44:40,770 --> 00:44:45,513
所有有標上HPU的這些欄位

711
00:44:45,513 --> 00:44:46,514
是不是真的都有填東西

712
00:44:46,514 --> 00:44:48,155
因為它主要是它percent non-null

713
00:44:48,155 --> 00:44:52,719
就是它要被檢查出來不是虛無值

714
00:44:52,719 --> 00:44:56,442
表示說可能有人拉了就已經進來到新的場景裡面

715
00:44:56,442 --> 00:44:58,583
它沒有被指定該被指定的東西

716
00:45:01,288 --> 00:45:04,670
全部解答完之後,如果沒有問題,單元測試才會過

717
00:45:04,670 --> 00:45:11,976
如果其中一個missing,還是no,就是不會過

718
00:45:11,976 --> 00:45:14,918
所以這兩個測試並不建立在Unity,我們寫的那個是碼子

719
00:45:14,918 --> 00:45:24,826
但我認為我可以重新寫,然後開放到我們的GitHub repository

720
00:45:24,826 --> 00:45:28,188
然後你就可以使用它,所以並不太難

721
00:45:30,841 --> 00:45:32,222
這兩個功能當然不是硬體內建的

722
00:45:32,222 --> 00:45:39,124
所以他們是SmartKey這個團隊裡面自製的檢查

723
00:45:39,124 --> 00:45:44,105
如果有必要的話,可以把這兩個很常見的檢查類型

724
00:45:44,105 --> 00:45:49,907
直接check in到目前我們都不需要的資料夾裡面

725
00:45:49,907 --> 00:45:53,128
如果有人想要看的話,可以直接看這個版本

726
00:45:53,128 --> 00:45:55,709
你自己可以再修改成自己要的形式

727
00:45:57,462 --> 00:45:58,143
Great.

728
00:45:58,143 --> 00:45:58,403
Yeah, cool.

729
00:45:58,403 --> 00:45:58,904
Thanks, Andrew.

730
00:45:58,904 --> 00:46:00,145
Any more questions?

731
00:46:00,145 --> 00:46:03,227
Do you want me to teach you?

732
00:46:03,227 --> 00:46:04,168
Oh, sure.

733
00:46:04,168 --> 00:46:12,356
So I'm a bit curious about how long does it take to fully test

734
00:46:12,356 --> 00:46:17,540
and build some hardware in the CI environment

735
00:46:17,540 --> 00:46:21,684
and how often you release the build to QA?

736
00:46:22,325 --> 00:46:35,070
And how long does it take to point you to verify that this build is ready for release?

737
00:46:36,527 --> 00:46:37,607
How often do we run it?

738
00:46:37,607 --> 00:46:41,449
How long does the whole process run for Subnautica?

739
00:46:41,449 --> 00:46:48,852
How long does it take for you to get the thing to QAT?

740
00:46:48,852 --> 00:46:52,093
How long is the response time from QAT to and back?

741
00:46:52,093 --> 00:46:59,256
Right, so our entire build process, all of this,

742
00:46:59,256 --> 00:47:04,198
the unit tests and building for a project of the size of Subnautica

743
00:47:04,198 --> 00:47:06,018
takes about 20 minutes.

744
00:47:06,918 --> 00:47:17,264
Uploading to Steam takes longer or shorter depending on whether you change a lot or a little.

745
00:47:17,264 --> 00:47:18,044
Steam is pretty clever.

746
00:47:18,044 --> 00:47:29,791
And then, once it is on Steam, Steam distributes it automatically instantly to everyone who is on that branch.

747
00:47:29,791 --> 00:47:33,013
So what we do is we have two branches.

748
00:47:36,046 --> 00:47:44,469
So we have the default branch, which is what you play when you just home the product.

749
00:47:44,469 --> 00:47:49,091
But then you can also opt in to an experimental branch.

750
00:47:49,091 --> 00:47:51,672
It's a little bit small.

751
00:47:51,672 --> 00:47:55,573
I don't know how to zoom in here.

752
00:47:55,573 --> 00:47:57,614
Is this a Google slide?

753
00:47:57,614 --> 00:47:59,955
That's a Google slide, yeah.

754
00:47:59,955 --> 00:48:01,756
Yeah, I don't know.

755
00:48:04,020 --> 00:48:14,304
You can go to Steam, you can press experimental and then you get the new build basically within 10 minutes or something of us pushing it to Steam.

756
00:48:14,304 --> 00:48:19,305
So the entire cycle is less than an hour.

757
00:48:19,305 --> 00:48:27,068
And because we push our builds to experimental and there's no password on it as you can tell, anyone can...

758
00:48:27,757 --> 00:48:29,218
can play that if they want to.

759
00:48:29,218 --> 00:48:32,341
That's a crazy idea because it's probably

760
00:48:32,341 --> 00:48:34,904
like lots of stuff that isn't

761
00:48:34,904 --> 00:48:35,845
100% working but

762
00:48:35,845 --> 00:48:38,367
super easy for our

763
00:48:38,367 --> 00:48:39,929
QA, for our playtesters

764
00:48:39,929 --> 00:48:41,470
to always

765
00:48:41,470 --> 00:48:44,714
play the latest build. It's very, very fast.

766
00:48:44,714 --> 00:48:46,696
So the QA and

767
00:48:46,696 --> 00:48:49,619
testers are basically

768
00:48:49,619 --> 00:48:50,680
playing a public build, right?

769
00:48:50,680 --> 00:48:50,940
Yeah.

770
00:48:51,999 --> 00:48:55,941
You just log into that and it's basically a public build.

771
00:48:55,941 --> 00:48:57,921
Yeah, exactly.

772
00:48:57,921 --> 00:49:04,884
And when we think that the build, the experimental build, is good enough,

773
00:49:04,884 --> 00:49:08,345
then we go in here and we click this button and say,

774
00:49:08,345 --> 00:49:10,246
okay, now make this build live on the default branch.

775
00:49:10,246 --> 00:49:13,667
So, click this one, select default, and then click okay.

776
00:49:13,667 --> 00:49:15,888
And then that's how you...

777
00:49:17,588 --> 00:49:21,852
發表這個規定給所有的玩家

778
00:49:21,852 --> 00:49:25,395
因為這不是一個很簡單的規定

779
00:49:25,395 --> 00:49:29,738
所以我會詳細的總結整個Q&A

780
00:49:29,738 --> 00:49:30,819
所以就是

781
00:49:30,819 --> 00:49:39,566
Telos 提到說在整個像Summoner's Rift這樣等級的遊戲

782
00:49:39,566 --> 00:49:42,149
這樣的規模的遊戲裡面

783
00:49:42,149 --> 00:49:42,429
大概

784
00:49:42,429 --> 00:49:44,771
剛剛Jankx這樣從頭到尾七個步驟跑完

785
00:49:44,771 --> 00:49:46,332
大概要20分鐘左右

786
00:49:48,639 --> 00:49:51,620
上傳跟發佈的短時間

787
00:49:51,620 --> 00:49:53,941
大約在10幾20分鐘之內

788
00:49:53,941 --> 00:49:55,903
差不多是這個時間

789
00:49:55,903 --> 00:49:58,164
整個流程

790
00:49:58,164 --> 00:49:59,745
真的有真的可以玩到

791
00:49:59,745 --> 00:50:02,686
剛剛Jankin跑完上傳的版本

792
00:50:02,686 --> 00:50:03,367
應該是一小時之內

793
00:50:03,367 --> 00:50:03,387
因為

794
00:50:08,078 --> 00:50:14,120
SummerCat在Steam上有一個實驗的分支

795
00:50:14,120 --> 00:50:16,681
這個實驗的分支是公開的,並沒有鎖

796
00:50:16,681 --> 00:50:19,383
只要你願意當買家鎖的話

797
00:50:19,383 --> 00:50:24,325
可以直接選擇這個分支來下載

798
00:50:24,325 --> 00:50:28,286
他們自己的QA跟測試員也是用這個實驗分支

799
00:50:28,286 --> 00:50:30,747
所以他就沒有另外一層

800
00:50:30,747 --> 00:50:33,568
所謂的公司內QA專用的版本

801
00:50:33,568 --> 00:50:35,709
還是公司內QA專用伺服器之類的

802
00:50:36,963 --> 00:50:43,468
它是直接用Steam的公開功能去做這些事情

803
00:50:43,468 --> 00:50:45,989
整個流程應該是說,你的JS開始跑,跑到結束

804
00:50:45,989 --> 00:50:51,393
到Steam的CDN幫你發佈到所有可以下載的點

805
00:50:51,393 --> 00:50:53,335
讓人家可以從Steam的界面上下載

806
00:50:53,335 --> 00:50:57,898
這樣的過程應該是第一小時

807
00:50:57,898 --> 00:51:00,900
整個專案的大小,就算是現在在跑

808
00:51:00,900 --> 00:51:02,542
30G、38G、40G平均

809
00:51:09,996 --> 00:51:12,198
It sounds very short for me.

810
00:51:12,198 --> 00:51:17,162
It sounds short because our QA is complaining it's long.

811
00:51:17,162 --> 00:51:23,967
But sometimes we have the programmer connect to the players just live,

812
00:51:23,967 --> 00:51:29,012
and then they fix something and they basically want to play it again.

813
00:51:29,012 --> 00:51:31,093
And then an hour is pretty long.

814
00:51:31,093 --> 00:51:35,016
But Subnautica is also a very big project.

815
00:51:35,626 --> 00:51:39,327
I'll let it count now, but I think it comes out at around 100 gigs.

816
00:51:39,327 --> 00:51:48,471
So if you have a smaller project, the antithread process is much faster and you can have a turnaround of like 5 minutes.

817
00:51:48,471 --> 00:51:49,471
Why are there 5,000 folders?

818
00:51:49,471 --> 00:51:49,891
Oh?

819
00:51:49,891 --> 00:51:54,793
Why are there 5,000 folders? What is the structure of that?

820
00:51:54,793 --> 00:51:57,114
Probably Unity's library folder.

821
00:51:57,114 --> 00:51:57,695
Oh.

822
00:51:57,695 --> 00:52:01,176
It's only 60.

823
00:52:03,434 --> 00:52:06,876
SolidWare的專案大小是60G

824
00:52:06,876 --> 00:52:08,397
然後兩張20幾萬的檔案

825
00:52:08,397 --> 00:52:11,519
這樣的專案規模去build下去

826
00:52:11,519 --> 00:52:16,362
剛講的大概20分鐘可以在圈內上跑

827
00:52:16,362 --> 00:52:19,584
不過我不想知道是不是在手機上會有

828
00:52:19,584 --> 00:52:21,826
或是手機環境上會有比較多

829
00:52:21,826 --> 00:52:30,111
莫名其妙的情況讓你的builder power cycle變長

830
00:52:30,111 --> 00:52:30,812
是有遇到一些問題

831
00:52:32,798 --> 00:52:35,719
We have a news about dual-screen BIOS.

832
00:52:35,719 --> 00:52:42,742
He said there is a big mobile project in his company,

833
00:52:42,742 --> 00:52:49,704
that if you build towards iOS and Android both,

834
00:52:49,704 --> 00:52:54,646
it takes more than 14 hours to complete.

835
00:52:54,646 --> 00:52:54,986
Okay.

836
00:52:54,986 --> 00:53:02,169
That would be interesting to hear.

837
00:53:03,492 --> 00:53:13,014
to know why, because if it's taking a long time to compile,

838
00:53:13,014 --> 00:53:16,495
then you can use assembly definition files,

839
00:53:16,495 --> 00:53:21,376
and if it's taking a long time to build the assets or package the assets,

840
00:53:21,376 --> 00:53:28,258
that's something that you can actually cache and only rebuild the parts that need rebuilding.

841
00:53:28,258 --> 00:53:30,758
So one thing that I didn't mention...

842
00:53:32,546 --> 00:53:40,068
In the build pipeline that I showed you, I'm keeping the

843
00:53:40,068 --> 00:53:48,491
library folder because otherwise every time I clean

844
00:53:48,491 --> 00:53:55,233
everything, all the private files and everything, but I

845
00:53:55,233 --> 00:53:59,434
keep the library folder because otherwise the next build

846
00:53:59,434 --> 00:54:01,275
would have to reimport everything again.

847
00:54:02,303 --> 00:54:05,347
So this helps a lot with big projects.

848
00:54:05,347 --> 00:54:10,973
But then yeah, if you have asset funnels that are nicely packed,

849
00:54:10,973 --> 00:54:18,702
you don't have to rebuild them over and over again unless something changes.

850
00:54:18,702 --> 00:54:21,185
But it's difficult to say what exactly is it without profiling.

851
00:54:23,344 --> 00:54:23,785
Yes?

852
00:54:23,785 --> 00:54:26,006
I would ask you about scaling.

853
00:54:26,006 --> 00:54:32,110
Like, if you have ever problems that you are making too many builds and too many people working on the projects,

854
00:54:32,110 --> 00:54:38,655
and then like the pipeline kind of like stuck because with this approach you can only execute one pipeline at the same time.

855
00:54:38,655 --> 00:54:38,775
Right.

856
00:54:38,775 --> 00:54:43,398
So, have you tried to use some Docker for that or like more nodes or how do you feel?

857
00:54:43,398 --> 00:54:47,781
The problem was can there ever be too many builds and...

858
00:54:50,202 --> 00:54:56,683
And luckily that's a problem that you can always fix by adding more computers.

859
00:54:56,683 --> 00:55:04,586
So right now I'm using Jenkins and the build server is the Jenkins server.

860
00:55:04,586 --> 00:55:09,987
But in theory you can have lots of other computers and they can be Jenkins slaves.

861
00:55:09,987 --> 00:55:12,568
So Jenkins tells them, okay, do this thing now, right?

862
00:55:12,568 --> 00:55:16,389
And so if you have, if your build takes 30 minutes.

863
00:55:17,140 --> 00:55:22,181
But within those 30 minutes, there are other builds that you also have to make or other unit tests that you also have to run.

864
00:55:22,181 --> 00:55:30,224
As long as you have enough machines that you can handle those requests concurrently, then nothing clogs up.

865
00:55:30,224 --> 00:55:42,128
If you don't have enough machines, then Jenkins just queues it and will work down the queue.

866
00:55:42,128 --> 00:55:46,390
If it's not a 14-hour build, there's a very good chance that overnight everything will finish.

867
00:55:49,406 --> 00:55:58,353
然後還有其他可以說的東西

868
00:55:58,353 --> 00:55:59,454
讓我簡單解釋一下

869
00:55:59,454 --> 00:56:02,576
讓我簡單解釋一下第一部分

870
00:56:02,576 --> 00:56:03,116
剛剛問題是說

871
00:56:03,116 --> 00:56:07,440
剛剛的流程基本上是一個線性流程

872
00:56:07,440 --> 00:56:10,722
就是如果你要並行處理的話

873
00:56:10,722 --> 00:56:14,545
怎麼樣可以讓 Jenkins 同時處理更多的 task 或是更多 job 這樣

874
00:56:15,436 --> 00:56:18,578
如果只有一台電腦,它基本上就是跑一條線

875
00:56:18,578 --> 00:56:20,939
做完一個動作之後,還會做下一個動作

876
00:56:20,939 --> 00:56:26,482
不過,Jembex的好處是

877
00:56:26,482 --> 00:56:33,325
你剛剛看到Stages的你要執行的內容

878
00:56:33,325 --> 00:56:36,987
你可以自己去定義那裡面是要跑什麼

879
00:56:36,987 --> 00:56:40,969
你可以在裡面某一個步驟,叫另外一台電腦幫你做測試

880
00:56:42,609 --> 00:56:48,353
or you can ask another computer to build something for you and send it back later.

881
00:56:48,353 --> 00:56:53,176
So if there are some parts of your build process that can be parallelized,

882
00:56:53,176 --> 00:56:55,158
then you have more than one computer,

883
00:56:55,158 --> 00:56:59,681
you can offload these operations to different computers.

884
00:56:59,681 --> 00:57:04,064
Right, so Jacket has a few tools to make sure that you don't do concurrent builds

885
00:57:04,064 --> 00:57:06,725
or that you don't do more than a build an hour or something.

886
00:57:06,725 --> 00:57:09,647
You can configure that.

887
00:57:09,647 --> 00:57:11,068
But really...

888
00:57:12,197 --> 00:57:22,621
What we found is that we're doing this where instead of merging manually, we tell Jenkins to merge it and it's not building it, it's only running the unit tests.

889
00:57:22,621 --> 00:57:33,684
And running the unit tests, if you pay a little bit of attention, you can make them run in under 10 minutes, even on a project of this scale.

890
00:57:33,684 --> 00:57:36,585
And so if we can do it, I think...

891
00:57:38,185 --> 00:57:47,852
this is something that should never clog up your build pipeline.

892
00:57:47,852 --> 00:57:56,738
And then the builds, if they really take a long time,

893
00:57:56,738 --> 00:58:00,320
just make one at the night.

894
00:58:00,320 --> 00:58:06,144
At least you have run your unit tests every single time.

895
00:58:07,051 --> 00:58:10,432
Like you are making some desktop application console game.

896
00:58:10,432 --> 00:58:14,654
Like if you are making mobile game or mobile applications.

897
00:58:14,654 --> 00:58:19,376
Like, do you also have some experience using the Jenkins to build it on Mac OS?

898
00:58:19,376 --> 00:58:21,317
Like the different platforms?

899
00:58:21,317 --> 00:58:22,717
To Android and iOS specifically?

900
00:58:22,717 --> 00:58:29,960
Yeah, because, yeah, basically because for the, you can't build it from Windows for the iOS.

901
00:58:29,960 --> 00:58:31,301
Right. Okay.

902
00:58:31,301 --> 00:58:36,823
No, I've never built anything for mobile platforms.

903
00:58:37,872 --> 00:58:50,995
We do have a similar problem for Linux and Mac, where we have to have a Mac computer to build for Mac and a Linux computer to build for Linux.

904
00:58:50,995 --> 00:59:03,198
You can have all that in Jenkins, hooked up, and select which process runs on which machine.

905
00:59:04,463 --> 00:59:09,228
I have no idea how long it takes or something to build something for Android.

906
00:59:09,228 --> 00:59:11,070
Does it take a long time?

907
00:59:11,070 --> 00:59:12,431
It depends how popular it is.

908
00:59:12,431 --> 00:59:16,596
And if you build for different platforms, like different older platforms,

909
00:59:16,596 --> 00:59:18,678
then we build several times.

910
00:59:18,678 --> 00:59:19,058
Yeah, okay.

911
00:59:19,058 --> 00:59:25,605
I said in the beginning we have a lot of platforms, right?

912
00:59:26,607 --> 00:59:38,617
We have Windows, but Windows is really like lots of different stores, and so you have to make a build for each different store, because they all have their own store integration, DLL and stuff like that.

913
00:59:38,617 --> 00:59:52,648
So, what we ended up doing is we build our experimental builds, we do it on Steam, because that's really easy, and then all the other stores, they only get the major releases.

914
00:59:52,648 --> 00:59:53,308
So whenever we...

915
00:59:55,008 --> 01:00:02,290
每個月我們會發佈一個穩定的更新

916
01:00:02,290 --> 01:00:04,971
然後我們會為所有其他軟體做更新

917
01:00:04,971 --> 01:00:08,972
因為他們沒有這種方便的軟體

918
01:00:08,972 --> 01:00:12,293
好,那我很快就商量一下剛剛的問題

919
01:00:12,293 --> 01:00:16,675
因為主要的問題是說

920
01:00:16,675 --> 01:00:20,216
像在手機上你如果可能要預設很多不同的版本

921
01:00:20,216 --> 01:00:22,476
或者是你可能是同一個平台

922
01:00:23,611 --> 01:00:30,396
他就要針對不同OS版本去view不同內容之類的情況

923
01:00:30,396 --> 01:00:32,918
可能你需要處理的版本數量很多

924
01:00:32,918 --> 01:00:34,299
然後時間可能會很長

925
01:00:34,299 --> 01:00:38,802
Jonas他提到的是

926
01:00:38,802 --> 01:00:44,266
他們SmartMonitor也有發佈各種不同的PC平台版本

927
01:00:44,266 --> 01:00:47,449
因為每個不同的PC平台都有一個平台的

928
01:00:48,504 --> 01:00:51,586
整合的API,像Steam有Steamworks

929
01:00:51,586 --> 01:00:52,467
Epic就Epic的其他東西

930
01:00:52,467 --> 01:00:56,210
Windows Store有Windows Store的東西

931
01:00:56,210 --> 01:00:57,310
如果是Control的話

932
01:00:57,310 --> 01:01:00,392
Xbox、PlayStation有放自己的東西

933
01:01:00,392 --> 01:01:02,274
這些版本全部都奧秘無錯

934
01:01:02,274 --> 01:01:07,537
但是剛剛提到的很快速的測試

935
01:01:07,537 --> 01:01:09,258
的行為

936
01:01:09,258 --> 01:01:12,841
一個小時之內可以讓QA那邊收到他要的版本

937
01:01:13,717 --> 01:01:19,960
原因是因為Steam有很方便的自動化上傳流程

938
01:01:19,960 --> 01:01:25,022
而且包括可以讓測試人員跟任何外面公開的玩家

939
01:01:25,022 --> 01:01:27,324
都可以直接用公開的版本

940
01:01:27,324 --> 01:01:32,286
這是一個實驗版,但實驗是公開的,大家就自己來用就對了

941
01:01:32,286 --> 01:01:33,447
因為Steam有這樣的功能

942
01:01:33,447 --> 01:01:38,389
所以它才有辦法在PC上做一小時的翻譯時間

943
01:01:39,692 --> 01:01:43,334
所以他們是每隔幾個禮拜或一個月

944
01:01:43,334 --> 01:01:47,256
才會去發佈到其他的Controller或其他筆電平台上

945
01:01:47,256 --> 01:01:49,157
但是Steam它就會有一個很快速的

946
01:01:49,157 --> 01:01:51,359
比如說接近是Hourly的View這樣

947
01:01:51,359 --> 01:01:52,359
每小時會有新版本出來

948
01:01:53,507 --> 01:02:05,070
Right, and platforms like Xbox and Playstation, there's a manual step every time you want to release a build, they have certification and stuff.

949
01:02:05,070 --> 01:02:12,092
So it would be impractical to try something like one hour turnaround time.

950
01:02:12,092 --> 01:02:16,854
It's like days for those kind of platforms to push anything.

951
01:02:16,854 --> 01:02:21,835
So we only do the big releases for them.

952
01:02:21,835 --> 01:02:21,915
Cool.

953
01:02:26,377 --> 01:02:31,718
So we'll just end the first session here and just go into open floor Q&A later.

954
01:02:31,718 --> 01:02:32,218
Sure.

955
01:02:32,218 --> 01:02:38,020
And if anyone is watching on Twitch, I'm happy to answer the questions there.

956
01:02:38,020 --> 01:02:44,441
If there are any questions on Twitch, you can send them in at any time.

957
01:02:44,441 --> 01:02:49,083
I'm using my own voice, so I won't be asking questions on the spot.

958
01:02:49,083 --> 01:02:51,703
Let's see if people on Twitch can hear me.

959
01:02:51,703 --> 01:02:53,944
I have a question. Was anyone able to connect to my computer?

960
01:02:54,787 --> 01:02:56,108
有人可以聯絡他那個Server嗎?

961
01:02:56,108 --> 01:02:56,809
那個Logos的8080

962
01:02:56,809 --> 01:03:00,151
What's the IP?102.33

963
01:03:00,151 --> 01:03:01,612
要上帝是不是?

964
01:03:01,612 --> 01:03:02,012
對,要上帝

965
01:03:02,012 --> 01:03:08,336
I don't think you want to give away password, right?

966
01:03:08,336 --> 01:03:09,717
No

967
01:03:09,717 --> 01:03:10,818
No way, right?

968
01:03:10,818 --> 01:03:15,421
I can make a new user

969
01:03:15,421 --> 01:03:20,764
It's on the demo project anyway

970
01:03:21,987 --> 01:03:23,709
Oh wait, you mean the Windows password?

971
01:03:23,709 --> 01:03:24,470
Not sure

972
01:03:24,470 --> 01:03:24,550
No

973
01:03:24,550 --> 01:03:29,778
Oh, there's a lock on screen, but we don't have the Jenkins password

974
01:03:29,778 --> 01:03:33,884
OK, we'll do it after the workshop then

975
01:03:33,884 --> 01:03:34,124
OK

976
01:03:34,124 --> 01:03:37,428
Cool, thank you so much

977
01:03:37,428 --> 01:03:38,570
好,那我們就先掌聲再謝謝四位

978
01:03:42,468 --> 01:03:45,010
我們等一下時間大概還有一兩小時

979
01:03:45,010 --> 01:03:47,132
我們就是現場有任何進階的問題

980
01:03:47,132 --> 01:03:49,494
你要直接跟Travis討論的話

981
01:03:49,494 --> 01:03:50,615
就是可以直接討論

982
01:03:50,615 --> 01:03:52,616
那我自己是有準備一些問題

983
01:03:52,616 --> 01:03:53,957
我等一下還是想要提出來

984
01:03:53,957 --> 01:03:56,279
因為我想大家可能都會有點興趣聽說

985
01:03:56,279 --> 01:03:57,841
到底可能還有些其他的

986
01:03:58,832 --> 01:04:01,875
新手的問題或是新手狀況才會遇到

987
01:04:01,875 --> 01:04:04,977
我們就先休息個二三十分鐘

988
01:04:04,977 --> 01:04:07,960
等一下再繼續進行問題討論

989
01:04:07,960 --> 01:04:09,941
有空餘的時間

990
01:04:09,941 --> 01:04:12,424
大家想要展示東西

991
01:04:12,424 --> 01:04:14,505
還是想要聊天

992
01:04:14,505 --> 01:04:17,087
跟別人交流

993
01:04:17,087 --> 01:04:18,509
這邊是隨意的

994
01:04:18,509 --> 01:04:20,210
都可以用

995
01:04:20,210 --> 01:04:21,711
上半場就先到這邊

