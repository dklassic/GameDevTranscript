1
00:00:00,895 --> 00:00:03,556
好,那很感謝大家今天來參加我們這個

2
00:00:03,556 --> 00:00:05,416
11月底的獨立遊戲開發者分享會

3
00:00:05,416 --> 00:00:09,017
那今天就是很難得邀請到這個 Kevin

4
00:00:09,017 --> 00:00:13,038
就是帶來算是上個月才剛發布完的

5
00:00:13,038 --> 00:00:15,699
這個用戶體驗篇官方的最新的情報

6
00:00:15,699 --> 00:00:17,899
那我們下半場還有另外一個講題是跟

7
00:00:17,899 --> 00:00:20,960
就是我們上個月底是講

8
00:00:44,194 --> 00:00:48,356
那個報名資訊上面其實我們有放一個影片

9
00:00:48,356 --> 00:00:50,857
然後相信各位應該都有看過

10
00:00:50,857 --> 00:00:52,657
如果沒有看過沒關係

11
00:00:52,657 --> 00:00:55,199
待會我再播一次給你看

12
00:00:55,199 --> 00:00:58,480
只不過說這個播一次是用Unity播

13
00:00:58,480 --> 00:00:59,060
我們把專案帶過來

14
00:00:59,060 --> 00:01:02,622
那我今天主要帶來的專案是一個

15
00:01:02,622 --> 00:01:07,984
我們叫做日漫的即時運算專案

16
00:01:07,984 --> 00:01:11,406
所以日本的動漫然後再加上即時運算

17
00:01:11,406 --> 00:01:12,927
我們想要做這件事情

18
00:01:13,475 --> 00:01:16,417
然後我們日本很積極就是往這條路走

19
00:01:16,417 --> 00:01:18,779
所以我們今天就是

20
00:01:18,779 --> 00:01:21,661
我從加拿大跟日本同事拿這個整個專案回來

21
00:01:21,661 --> 00:01:23,742
然後呢 拿來分享

22
00:01:23,742 --> 00:01:26,444
這個專案叫做Fantanology

23
00:01:26,444 --> 00:01:30,387
它其實就是基於一個用Unity Jump當作一個主角

24
00:01:30,387 --> 00:01:35,171
然後去發展出一個旁系的故事系統

25
00:01:35,171 --> 00:01:37,773
因為Unity Jump本身

26
00:01:37,773 --> 00:01:39,734
應該開發者都知道這個角色

27
00:01:39,734 --> 00:01:41,115
然後但是你不知道

28
00:01:50,308 --> 00:01:53,069
重工的未來的CEO

29
00:01:53,069 --> 00:01:55,370
非常羨慕

30
00:01:55,370 --> 00:01:57,270
所以Unity本身是

31
00:01:57,270 --> 00:01:58,470
也是我們日本

32
00:01:58,470 --> 00:02:00,071
日本那邊先發展出來

33
00:02:00,071 --> 00:02:01,591
因為Unity比較特別的是

34
00:02:01,591 --> 00:02:04,612
它是很多國家

35
00:02:04,612 --> 00:02:05,732
都有我們同事

36
00:02:05,732 --> 00:02:08,673
但是這個角色是從日本

37
00:02:08,673 --> 00:02:10,373
日本的

38
00:02:10,373 --> 00:02:12,594
我們的日本公司發展出來

39
00:02:12,594 --> 00:02:13,934
它其實在現在

40
00:02:13,934 --> 00:02:15,795
Unity本家裡面

41
00:02:15,795 --> 00:02:18,655
它並沒有那麼被歐美的

42
00:02:18,655 --> 00:02:19,055
Unity

43
00:02:19,824 --> 00:02:21,886
旁系的知識去認可

44
00:02:21,886 --> 00:02:24,748
所以他比較走亞洲路線

45
00:02:24,748 --> 00:02:27,330
那可能因為像這種角色啊

46
00:02:27,330 --> 00:02:29,272
就我們自己來看很OK

47
00:02:29,272 --> 00:02:31,053
但是有某一些國家

48
00:02:31,053 --> 00:02:34,116
某一些國家他看了他會覺得他曝露

49
00:02:34,116 --> 00:02:35,897
或是帶有色情

50
00:02:35,897 --> 00:02:36,878
是有可能的

51
00:02:36,878 --> 00:02:40,841
所以我們就沒有辦法把它制定成為一個叫做

52
00:02:40,841 --> 00:02:42,823
官方角色

53
00:02:42,823 --> 00:02:45,365
所以你會發現說這個角色大部分都是由Unity講的

54
00:02:45,365 --> 00:02:47,026
在Unity部落格

55
00:02:47,026 --> 00:02:49,088
就是他自己本身有一個Unity講的部落格

56
00:02:49,612 --> 00:02:51,153
上面去發展

57
00:02:51,153 --> 00:02:52,613
所以我們這個體系是這樣

58
00:02:52,613 --> 00:02:54,673
但是我覺得這個對開發者

59
00:02:54,673 --> 00:02:55,473
相當有幫助

60
00:02:55,473 --> 00:02:57,394
因為主要我們當初做這隻角色

61
00:02:57,394 --> 00:02:59,874
是為了要給日本

62
00:02:59,874 --> 00:03:03,535
日本做卡通類型的那些開發者

63
00:03:03,535 --> 00:03:05,755
知道說模型怎麼做

64
00:03:05,755 --> 00:03:07,675
那個shader怎麼做

65
00:03:07,675 --> 00:03:10,156
然後在即時運算引擎裡面

66
00:03:10,156 --> 00:03:12,536
要怎麼去做這個東西

67
00:03:12,536 --> 00:03:14,477
而不是把它算出來變成一個

68
00:03:14,477 --> 00:03:16,517
美式漫畫

69
00:03:16,517 --> 00:03:17,277
就是不是變成一個

70
00:03:18,214 --> 00:03:21,616
那種Dolly那種美式的風格 而是日式的

71
00:03:21,616 --> 00:03:25,359
日式的風格就有很多很奇怪的麻要遵守

72
00:03:25,359 --> 00:03:27,200
待會都會介紹一下

73
00:03:27,200 --> 00:03:31,424
所以這個是2013年

74
00:03:31,424 --> 00:03:33,685
2013年就大概四年前嘛

75
00:03:33,685 --> 00:03:35,687
四年前所出生的

76
00:03:35,687 --> 00:03:38,649
然後我們一直不斷的去發展這個整個體系

77
00:03:38,649 --> 00:03:41,491
那就是在去年 應該說去年我們開始一個計畫

78
00:03:43,419 --> 00:03:45,000
因為我們有Unity 5之後

79
00:03:45,000 --> 00:03:51,904
我們開始不是想要找一些做動畫的、電影的這幾種開發者來參與

80
00:03:51,904 --> 00:03:57,928
那日本尤其是動漫是最蓬勃發展

81
00:03:57,928 --> 00:03:59,509
但是我們希望說

82
00:03:59,509 --> 00:04:06,093
我們要讓這些傳統製程的動畫工業來使用Unity 5

83
00:04:06,093 --> 00:04:07,133
我們沒辦法說把工具拿給他

84
00:04:16,707 --> 00:04:20,389
然後能夠盡量解決那些傳統製程

85
00:04:20,389 --> 00:04:22,791
去比較說你傳統製程

86
00:04:22,791 --> 00:04:25,373
你用算圖的跟用這種即時運算的

87
00:04:25,373 --> 00:04:27,155
好處在哪裡、壞處在哪裡

88
00:04:27,155 --> 00:04:29,156
由我們官方自己來製作

89
00:04:29,156 --> 00:04:31,138
為什麼是由官方自己來製作呢?

90
00:04:31,138 --> 00:04:34,200
一方面我們也不懂動畫怎麼做

91
00:04:34,200 --> 00:04:35,221
想學

92
00:04:35,221 --> 00:04:36,742
一方面音樂體有很多新工具

93
00:04:36,742 --> 00:04:39,224
像Pine9、CMachine這種新工具

94
00:04:39,224 --> 00:04:41,946
我們自己還要自己先練習

95
00:04:41,946 --> 00:04:42,907
讓它成為一個標準

96
00:04:42,907 --> 00:04:43,407
所以

97
00:04:46,615 --> 00:04:50,957
在上個月我們在Austin就發表了這個動畫

98
00:04:50,957 --> 00:04:54,678
那各位應該在YouTube上面看到的是YouTube的影片

99
00:04:54,678 --> 00:04:55,798
這個是一樣的

100
00:04:55,798 --> 00:04:59,519
所以我們可以先來看一下

101
00:04:59,519 --> 00:05:03,080
它是長什麼樣子

102
00:05:03,080 --> 00:05:04,641
我會多播幾次

103
00:05:04,641 --> 00:05:06,881
但這一次我先播全螢幕

104
00:05:06,881 --> 00:05:09,062
但是我要先說明一下就是

105
00:05:09,062 --> 00:05:10,722
因為我是Mac機器嘛

106
00:05:10,722 --> 00:05:12,063
然後呢實際上

107
00:05:12,063 --> 00:05:12,423
那個聲音

108
00:05:16,856 --> 00:05:19,558
實際上我的 Mac 機器在播這個專案的時候

109
00:05:19,558 --> 00:05:23,020
有一些 2D 特效其實是有問題的

110
00:05:23,020 --> 00:05:25,541
在 Windows 機上沒有

111
00:05:25,541 --> 00:05:27,842
在 Windows 中沒有

112
00:05:27,842 --> 00:05:28,943
所以我會說明一下

113
00:05:28,943 --> 00:05:33,085
現在各位看到的就是一整個即時運算的過程

114
00:05:33,085 --> 00:05:34,946
那我先用全螢幕

115
00:05:34,946 --> 00:05:38,168
然後待會我會解釋它裡面哪些東西是怎麼做

116
00:05:38,168 --> 00:05:40,590
然後有些哪些注意事項要遵守

117
00:05:48,947 --> 00:05:52,769
這個專案其實讓我們小組吃了不少苦頭

118
00:05:52,769 --> 00:05:56,111
因為你會覺得說我就是遊戲開發者非常厲害

119
00:05:56,111 --> 00:05:59,554
來做日本式的漫畫、動畫

120
00:05:59,554 --> 00:06:04,897
其實是完全是不同領域

121
00:06:04,897 --> 00:06:16,564
不同領域

122
00:06:20,360 --> 00:06:24,061
各位有沒有發現就是

123
00:06:24,061 --> 00:06:27,282
這個即時運算有一個很重要的事情

124
00:06:27,282 --> 00:06:30,123
就是要一氣呵成

125
00:06:30,123 --> 00:06:33,964
所以這個是我們第一個遇到的難關

126
00:06:33,964 --> 00:06:35,504
你們做遊戲無所謂

127
00:06:35,504 --> 00:06:38,725
就是過了一關可以loading

128
00:06:38,725 --> 00:06:38,745
對不對

129
00:06:38,745 --> 00:06:41,586
或者是說你一開始可能有那種載入

130
00:06:41,586 --> 00:06:42,846
沒有關係

131
00:06:42,846 --> 00:06:44,467
可能請觀眾等個五秒鐘

132
00:06:44,467 --> 00:06:47,408
登登登登loading now

133
00:06:47,408 --> 00:06:47,868
然後開始

134
00:06:54,712 --> 00:06:56,252
所以代表一件事情

135
00:06:56,252 --> 00:06:59,794
你所有的內容都要在同一個場景完成

136
00:06:59,794 --> 00:07:04,977
要不然你就沒有辦法這麼即時去做切換

137
00:07:04,977 --> 00:07:06,378
所以這個代表說

138
00:07:06,378 --> 00:07:08,840
如果你要做一個30秒的動畫

139
00:07:08,840 --> 00:07:10,701
跟做一個5分鐘的動畫

140
00:07:10,701 --> 00:07:12,722
跟做一個30分鐘的動畫

141
00:07:12,722 --> 00:07:13,962
它的難度會完全不一樣

142
00:07:13,962 --> 00:07:17,545
它的難度完全不一樣

143
00:07:17,545 --> 00:07:20,026
但是這個還是有其必要啦

144
00:07:20,026 --> 00:07:23,948
就是假設我今天我要做一些像Avatar

145
00:07:23,948 --> 00:07:24,228
我如果

146
00:07:24,815 --> 00:07:29,299
未來我們認為說動畫有可能現在你看的時候會

147
00:07:29,299 --> 00:07:31,741
會希望是

148
00:07:31,741 --> 00:07:33,602
享受故事劇情

149
00:07:33,602 --> 00:07:36,084
但是有可能你希望未來是

150
00:07:36,084 --> 00:07:37,485
包子不在這邊對不對

151
00:07:37,485 --> 00:07:39,847
假設他今天想說他

152
00:07:39,847 --> 00:07:41,929
課金把所有的角色都換小蘿莉

153
00:07:41,929 --> 00:07:43,069
可不可以

154
00:07:43,069 --> 00:07:45,151
用real time的預算就可以了

155
00:07:45,151 --> 00:07:45,892
或者是你看那個

156
00:07:45,892 --> 00:07:49,654
有些那種sparking的場景

157
00:07:49,654 --> 00:07:51,956
在男主角跟女主角要接吻的時候

158
00:07:51,956 --> 00:07:53,317
畫面就黑掉了

159
00:07:53,317 --> 00:07:53,958
這時候你就課金

160
00:07:54,705 --> 00:07:58,187
買DLC加長版45分鐘在那一段幫你插進去

161
00:07:58,187 --> 00:07:58,207
對不對

162
00:07:58,207 --> 00:08:00,628
這個是Round Time

163
00:08:00,628 --> 00:08:03,910
Round Time可以做到的

164
00:08:03,910 --> 00:08:07,392
而不是每次你去電影院看那個角度一定都是那樣

165
00:08:07,392 --> 00:08:10,354
以後可能再加上VR的時候你可以

166
00:08:10,354 --> 00:08:12,675
你可以在不同角度去看這個場景

167
00:08:12,675 --> 00:08:15,697
這本來我們是期望說未來的動畫

168
00:08:15,697 --> 00:08:18,559
是可以發展到那麼樣的程度

169
00:08:18,559 --> 00:08:19,980
有那麼樣的程度

170
00:08:19,980 --> 00:08:23,241
但是我們遇到最大的困難第一點就是

171
00:08:24,334 --> 00:08:26,295
傳統製程的人 尤其是美術

172
00:08:26,295 --> 00:08:29,797
你要他去換新工具 非常的困難

173
00:08:29,797 --> 00:08:31,878
尤其是已經在這個行業裡面很久

174
00:08:31,878 --> 00:08:37,002
比如說他做日本動畫已經做了十年 二十年 那種老江湖

175
00:08:37,002 --> 00:08:39,703
你要他去碰新技術 其實是有點困難

176
00:08:39,703 --> 00:08:43,125
何況做一個動畫其實沒有想像中那麼簡單

177
00:08:43,125 --> 00:08:46,207
為什麼呢 因為它是日本動畫

178
00:08:46,207 --> 00:08:47,648
它是日本動畫

179
00:08:47,648 --> 00:08:49,609
它跟歐美動畫是完全不一樣

180
00:08:49,609 --> 00:08:50,270
因為它的規則完全不一樣

181
00:08:52,657 --> 00:08:57,061
這是Unity一些客戶所做出來的

182
00:08:57,061 --> 00:08:59,503
我們認為還不錯的日本動畫

183
00:08:59,503 --> 00:09:02,825
像底下這個是Idol Master

184
00:09:02,825 --> 00:09:04,046
他是跳舞的

185
00:09:04,046 --> 00:09:06,108
他是用Unity做的

186
00:09:06,108 --> 00:09:08,310
然後像FGO

187
00:09:08,310 --> 00:09:15,816
FanFight都是Unity做的

188
00:09:15,816 --> 00:09:16,056
所以我們認為說

189
00:09:16,056 --> 00:09:19,239
如果遊戲開發者可以做出這樣的品質

190
00:09:19,239 --> 00:09:20,460
就代表品質應該不會

191
00:09:21,790 --> 00:09:24,130
在整個製程上應該是可以去改善

192
00:09:24,130 --> 00:09:25,631
所以我們做這件事情呢

193
00:09:25,631 --> 00:09:28,671
是希望重新定義整個傳統製程

194
00:09:28,671 --> 00:09:31,772
是否能夠用新的製程來取代

195
00:09:31,772 --> 00:09:34,633
甚至是把它改進成更好的

196
00:09:34,633 --> 00:09:35,653
一方面我們也是希望說

197
00:09:35,653 --> 00:09:38,113
Time-Lapse ZMachine太新了

198
00:09:38,113 --> 00:09:42,194
我們看可不可以用這種新的技術

199
00:09:42,194 --> 00:09:43,434
來自己也學習一下

200
00:09:43,434 --> 00:09:45,595
降低成本是最主要的考量

201
00:09:45,595 --> 00:09:46,975
因為你不可能說

202
00:09:46,975 --> 00:09:48,496
我原本花這麼多錢去做一個動畫

203
00:09:50,629 --> 00:09:52,650
我現在用新製程要花更多錢

204
00:09:52,650 --> 00:09:55,752
除非我們因為這樣子賺更多錢

205
00:09:55,752 --> 00:09:57,092
那可能還可以縮

206
00:09:57,092 --> 00:09:59,133
但是如果沒辦法降低成本的話

207
00:09:59,133 --> 00:10:02,935
尤其是通常這種產業最貴的就是人力成本

208
00:10:02,935 --> 00:10:05,417
就是你必須要有非常多的化石

209
00:10:05,417 --> 00:10:09,819
那日本化石跟美國化石又完全不一樣

210
00:10:09,819 --> 00:10:12,160
又完全不一樣

211
00:10:12,160 --> 00:10:13,260
來看一下這個設定

212
00:10:13,260 --> 00:10:15,622
我們幫Unity講說了蠻多設定

213
00:10:21,965 --> 00:10:25,166
他本身被設定是一個壞人

214
00:10:25,166 --> 00:10:28,387
然後在一個廢墟學園裡面

215
00:10:28,387 --> 00:10:30,188
所以有很多設定

216
00:10:30,188 --> 00:10:32,989
這個專案我們會一樣

217
00:10:32,989 --> 00:10:36,730
到時候會發佈在UnityJump的部落格上面

218
00:10:36,730 --> 00:10:38,171
連同設定稿 連同專案

219
00:10:38,171 --> 00:10:41,212
然後明年的Unite應該也會有他們的畫冊出來

220
00:10:52,112 --> 00:10:52,232
還蠻詳細的

221
00:10:52,232 --> 00:11:04,782
然後它本身背後有六隻翅膀

222
00:11:04,782 --> 00:11:05,463
還有一些面具設計

223
00:11:05,463 --> 00:11:10,507
然後各位看到的這個畫

224
00:11:10,507 --> 00:11:12,128
它有可能不是畫師畫的

225
00:11:19,447 --> 00:11:24,210
如果是即時運算的話要做到這種程度有一個很重要的關鍵就是Shader

226
00:11:24,210 --> 00:11:29,374
Shader必須要做到它畫起來像動漫的感覺的Shader

227
00:11:29,374 --> 00:11:32,096
所以我們有一個MunityJump 2.0的Shader出現

228
00:11:32,096 --> 00:11:38,460
就是為了一直不斷的強化就是為了要做這種事情而深腦

229
00:11:38,460 --> 00:11:41,842
這個是程式

230
00:11:41,842 --> 00:11:43,203
它有一個橋我們待會會看到那個橋

231
00:11:54,269 --> 00:11:58,872
那我們整個技術遇到很多挑戰

232
00:11:58,872 --> 00:11:59,912
重新寫 shader

233
00:11:59,912 --> 00:12:02,354
shader 要重新寫是必然的

234
00:12:02,354 --> 00:12:02,734
這個是聲音

235
00:12:02,734 --> 00:12:04,075
我把它放桌上

236
00:12:04,075 --> 00:12:08,097
shader 要重新寫

237
00:12:08,097 --> 00:12:12,120
那本來 Unity 本身就帶有一個 shader

238
00:12:12,120 --> 00:12:14,821
所以我們那個小林信行

239
00:12:14,821 --> 00:12:16,802
他就是負責做這些事情

240
00:12:16,802 --> 00:12:18,423
上次我們有邀請他來

241
00:12:18,423 --> 00:12:20,865
他做模型跟做 shader

242
00:12:20,865 --> 00:12:23,146
然後一直不斷的去強化這個 shader

243
00:12:23,146 --> 00:12:23,386
為什麼要講

244
00:12:24,194 --> 00:12:26,175
為什麼要強調這個 shader 呢?

245
00:12:26,175 --> 00:12:29,777
因為日漫的 shader 跟一般外面我們看到的漫畫

246
00:12:29,777 --> 00:12:32,078
每次的是完全不一樣的

247
00:12:32,078 --> 00:12:33,238
那第二個就是

248
00:12:33,238 --> 00:12:34,199
因為我們不知道

249
00:12:34,199 --> 00:12:37,761
我們現在可以算出遊戲整個場景可能面數大概多少

250
00:12:37,761 --> 00:12:38,201
可能我們認為說

251
00:12:38,201 --> 00:12:40,362
如果是手機版的

252
00:12:40,362 --> 00:12:44,464
可能一個場景十萬面還可以承受得了目前硬體

253
00:12:44,464 --> 00:12:45,925
但是如果是 PC

254
00:12:45,925 --> 00:12:48,146
那可能可以加到再多一點

255
00:12:48,146 --> 00:12:49,847
可能五十萬面六十萬面

256
00:12:49,847 --> 00:12:51,388
我們都有一個底

257
00:12:51,388 --> 00:12:51,588
但是

258
00:12:52,456 --> 00:12:55,377
即時運算的動漫我們沒有底

259
00:12:55,377 --> 00:12:59,838
所以我們要藉由這一個專案來算出一個平均值

260
00:12:59,838 --> 00:13:05,160
就是在模型看起來最接近畫師用手繪的感覺

261
00:13:05,160 --> 00:13:06,700
但是它是模型

262
00:13:06,700 --> 00:13:09,601
然後它在整個畫面裡面

263
00:13:09,601 --> 00:13:12,162
場景裡面整個總合起來的面數

264
00:13:12,162 --> 00:13:14,042
可以讓引擎來承受

265
00:13:14,042 --> 00:13:15,783
可能我們有制定一個

266
00:13:15,783 --> 00:13:16,703
像我們這種電腦大概960顯卡

267
00:13:16,703 --> 00:13:20,784
然後大概可以多少面來做這件事情為基礎

268
00:13:22,090 --> 00:13:25,632
所以這個專案主要第二件事就是要算這個量

269
00:13:25,632 --> 00:13:29,414
然後呢我們會主要還要研究的是2D跟3D的

270
00:13:29,414 --> 00:13:35,398
因為我們原本認為所有的特效用3D做就好了

271
00:13:35,398 --> 00:13:38,079
用particle system

272
00:13:38,079 --> 00:13:40,541
但是呢剛剛我們一開始不是有提到嗎

273
00:13:40,541 --> 00:13:44,283
如果你動漫經驗沒有看超過一千個小時

274
00:13:44,283 --> 00:13:45,343
不要來做這個專案

275
00:13:45,343 --> 00:13:48,645
最主要的原因就是因為動漫宅

276
00:13:48,645 --> 00:13:49,546
我們講動漫宅

277
00:13:50,690 --> 00:13:58,316
看了你的作品,馬上0.05秒就可以分辨出它是不是日漫

278
00:13:58,316 --> 00:14:04,860
因為它很多東西在你看起來就是應該長那個樣子

279
00:14:04,860 --> 00:14:07,362
但是引擎算不出來

280
00:14:07,362 --> 00:14:08,283
引擎算不出來

281
00:14:08,283 --> 00:14:12,166
因為日漫的畫師決定一切,應該這麼說

282
00:14:12,166 --> 00:14:14,228
日漫的畫師決定一切

283
00:14:14,228 --> 00:14:14,488
比如說像這個

284
00:14:19,486 --> 00:14:21,107
一定要用 2D 去疊

285
00:14:21,107 --> 00:14:25,209
所以我們找了另外一個團隊去幫我們做後製

286
00:14:25,209 --> 00:14:29,552
就是做這種隔放的那種 2D 動畫特效

287
00:14:29,552 --> 00:14:31,873
那待會我會講為什麼要做這樣的事情

288
00:14:31,873 --> 00:14:35,936
像這種煙霧你如果要用特效去做其實反而會更難

289
00:14:35,936 --> 00:14:41,379
所以最簡單的方式你還是把 2D 片面的圖檔

290
00:14:41,379 --> 00:14:43,080
動畫圖檔放到 3D 的場景

291
00:14:43,080 --> 00:14:46,482
所以我們主要是又多了這個挑戰

292
00:14:46,482 --> 00:14:47,903
如何把 2D 跟 3D 做結合

293
00:14:47,903 --> 00:14:48,723
然後讓它看起來

294
00:14:49,570 --> 00:14:57,032
不是說合理 而是接近我們現在所看到的日漫 日本動漫的那種效果

295
00:14:57,032 --> 00:15:03,655
讓它成為一個本來的漫畫迷 動漫迷就接受的那個品質

296
00:15:03,655 --> 00:15:09,637
所以整個流程是如何去返回現在的品質

297
00:15:09,637 --> 00:15:13,098
而不是說我們去重新創立一個新的質感

298
00:15:13,098 --> 00:15:15,279
因為不行 如果你不那麼做

299
00:15:23,958 --> 00:15:25,538
然後人也是一樣

300
00:15:25,538 --> 00:15:30,359
我們整個人是完全沒辦法用引擎算出來的

301
00:15:30,359 --> 00:15:34,000
所以你一定要在Shader上面動很多手腳

302
00:15:34,000 --> 00:15:37,301
因為你本身有這幾個圖層

303
00:15:37,301 --> 00:15:40,161
就是高亮的部分、陰影的部分

304
00:15:40,161 --> 00:15:41,902
然後你看這些陰影的部分

305
00:15:41,902 --> 00:15:44,882
沒辦法用光線、光影去打出來

306
00:15:44,882 --> 00:15:46,563
所以你一定要用Shader去打出來

307
00:15:46,563 --> 00:15:49,183
所以在這個Shader的設定上面

308
00:15:49,183 --> 00:15:51,944
你都可以去設定這個陰影的角度

309
00:15:52,880 --> 00:15:54,422
你可以去指定陰影的角度

310
00:15:54,422 --> 00:15:57,404
然後可以指定它的顏色跟它的類別

311
00:15:57,404 --> 00:16:00,826
所以你可以看到上面不是有一個頭環嗎

312
00:16:00,826 --> 00:16:02,928
他們叫天使之環

313
00:16:02,928 --> 00:16:04,129
那個就是算不出來

314
00:16:04,129 --> 00:16:06,330
你一定要用學者去做

315
00:16:06,330 --> 00:16:07,691
但是你沒有這個環

316
00:16:07,691 --> 00:16:09,513
它就不是漫畫

317
00:16:09,513 --> 00:16:12,074
你就一定要有這個東西才行

318
00:16:12,074 --> 00:16:13,956
包含什麼呢

319
00:16:13,956 --> 00:16:16,117
這個是滿經典的

320
00:16:16,117 --> 00:16:18,999
這個是新世紀服役戰士

321
00:16:20,017 --> 00:16:22,298
那你可以看到這個畫師非常厲害

322
00:16:22,298 --> 00:16:25,401
但是他有一個習慣

323
00:16:25,401 --> 00:16:30,585
他喜歡用紫色來呈現光線反射

324
00:16:30,585 --> 00:16:32,826
所以你可以看到他的頭髮是紫色

325
00:16:32,826 --> 00:16:34,728
他身體所產生的反射

326
00:16:34,728 --> 00:16:38,711
陰影跟光線反射都用紫色來呈現

327
00:16:38,711 --> 00:16:40,892
但是環境沒有紫色

328
00:16:40,892 --> 00:16:44,395
環境沒有紫色就代表影集算不出來那個紫色

329
00:16:44,395 --> 00:16:47,758
所以你必須要用shader去假裝那裡是有

330
00:16:48,520 --> 00:16:51,563
紫色的環境讓它反射出紫色的光

331
00:16:51,563 --> 00:16:55,586
讓它呈現出這個畫師想要的風格

332
00:16:55,586 --> 00:16:59,490
所以簡單來說這個畫師畫出來的就是標準

333
00:16:59,490 --> 00:17:02,532
那你在其他的漫畫你可能會看到另外一套標準

334
00:17:02,532 --> 00:17:06,216
所以每一套動漫都有它自己的標準

335
00:17:06,216 --> 00:17:08,778
那你就沒有辦法用單一標準來製作

336
00:17:08,778 --> 00:17:14,803
你就必須要依照那個畫師所走的路線來制定你的shader

337
00:17:14,803 --> 00:17:16,164
還有shader可以處理

338
00:17:16,888 --> 00:17:20,069
所以你在沒有反射的情況下跟在有反射的情況下

339
00:17:20,069 --> 00:17:21,649
它質感會差很多

340
00:17:21,649 --> 00:17:24,790
但是因為你看漫畫看久了

341
00:17:24,790 --> 00:17:27,170
你會覺得還不錯喔

342
00:17:27,170 --> 00:17:30,571
你叫報紙來看他應該會覺得OK 100分

343
00:17:30,571 --> 00:17:33,431
但是這個是

344
00:17:33,431 --> 00:17:35,432
這是現實生活中沒有辦法這麼算

345
00:17:35,432 --> 00:17:36,992
因為環境沒紫色

346
00:17:36,992 --> 00:17:40,173
你怎麼會有紫色的光產生在身上

347
00:17:40,173 --> 00:17:43,653
所以你就必須要用偷吃步來做

348
00:17:43,653 --> 00:17:44,513
但是這個偷吃步

349
00:17:44,964 --> 00:17:50,928
是為了要讓他做出來之後,讓日漫迷去接受這個質感

350
00:17:50,928 --> 00:17:54,210
最主要的原因就是這樣

351
00:17:54,210 --> 00:17:58,653
所以呢,包含這個 shader 裡面有很多參數

352
00:17:58,653 --> 00:18:03,436
就是你可以去改變你的陰影的位置

353
00:18:03,436 --> 00:18:06,217
我們有這個 shader 本身是已經到 2.0 的

354
00:18:06,217 --> 00:18:09,499
然後這個 2.0 的 shader 它有兩個品質

355
00:18:12,211 --> 00:18:15,532
一個是比較色塊的,一個是紋理比較細的

356
00:18:15,532 --> 00:18:17,593
可以去調整

357
00:18:17,593 --> 00:18:22,975
然後我們現在的小林就是一直不斷的在強化這個shader

358
00:18:22,975 --> 00:18:24,936
那這個shader有幾個有趣的地方

359
00:18:24,936 --> 00:18:29,897
第一個,日版有一個非常奇怪的條件

360
00:18:29,897 --> 00:18:33,379
就是眉毛要在頭髮前面

361
00:18:33,379 --> 00:18:36,300
ok,那這個就算不出來

362
00:18:36,300 --> 00:18:39,381
你就一定得再shader處理嘛

363
00:18:39,381 --> 00:18:41,702
所以眉毛要算在頭髮前面

364
00:18:42,391 --> 00:18:47,213
然後頭髮要有那個邊線要Outline

365
00:18:47,213 --> 00:18:48,894
然後要多一個天使之環

366
00:18:48,894 --> 00:18:53,136
所以這些東西都是隱形算不出來的

367
00:18:53,136 --> 00:18:55,036
但是你必須在製作

368
00:18:55,036 --> 00:19:02,360
就是說假設你今天的目標是3D模型變成日漫風格的動畫

369
00:19:02,360 --> 00:19:03,560
這些就必須要得以解決

370
00:19:05,660 --> 00:19:07,222
光線是沒辦法解決的

371
00:19:07,222 --> 00:19:08,683
你一定要用作假的方式

372
00:19:08,683 --> 00:19:11,305
而且我們講到的是即時運算

373
00:19:11,305 --> 00:19:13,126
所謂的即時運算就是說

374
00:19:13,126 --> 00:19:14,968
在當下所有的條件

375
00:19:14,968 --> 00:19:19,231
那個鏡頭、分鏡都是沒辦法去作假的

376
00:19:19,231 --> 00:19:21,793
你沒辦法說

377
00:19:21,793 --> 00:19:22,433
嗯...當然不一樣

378
00:19:22,433 --> 00:19:24,695
如果你最後輸出的是影片

379
00:19:24,695 --> 00:19:25,796
我們後面會講

380
00:19:25,796 --> 00:19:27,357
你最後輸出的影片

381
00:19:27,357 --> 00:19:29,879
或是你是要希望有人戴VR眼鏡

382
00:19:29,879 --> 00:19:30,940
在裡面看你的角色

383
00:19:34,383 --> 00:19:37,485
所以這個 shader 就是為了要做這件事情

384
00:19:37,485 --> 00:19:39,666
包括這個邊線

385
00:19:39,666 --> 00:19:44,509
然後在漫畫裡面有一個非常難表現的就是

386
00:19:44,509 --> 00:19:45,750
這個角度

387
00:19:45,750 --> 00:19:47,171
這個角度看他側臉的時候

388
00:19:47,171 --> 00:19:49,612
他嘴巴是在這邊

389
00:19:49,612 --> 00:19:52,895
但是其實他的嘴巴不能歪

390
00:19:52,895 --> 00:19:53,915
如果你這個時候運鏡運到這邊來

391
00:19:53,915 --> 00:19:55,916
嘴巴就不見了

392
00:19:55,916 --> 00:19:56,737
那怎麼辦

393
00:19:56,737 --> 00:20:00,119
所以這都是在整個做日漫動畫的時候

394
00:20:00,119 --> 00:20:01,920
我們必須要考慮的

395
00:20:01,920 --> 00:20:03,701
可能是實習團隊要考慮

396
00:20:04,420 --> 00:20:07,102
引擎未來的功能發展也要考慮的

397
00:20:07,102 --> 00:20:10,505
所以我們做到這一點已經頭洗下去回不來

398
00:20:10,505 --> 00:20:13,927
但是非常的痛苦

399
00:20:13,927 --> 00:20:18,830
因為完全超乎我們的本身的專業知識之外

400
00:20:18,830 --> 00:20:22,153
但是還好那個小林本身他也是動漫迷

401
00:20:22,153 --> 00:20:25,875
所以他們花了很多時間

402
00:20:25,875 --> 00:20:27,776
然後我們因為這件事情

403
00:20:27,776 --> 00:20:31,039
我們意識到我們不能用全部Unity的人來做

404
00:20:31,039 --> 00:20:33,020
如果我們全部把Unity的專家找來

405
00:20:33,020 --> 00:20:33,260
做不出這種

406
00:20:34,076 --> 00:20:35,097
日本風格

407
00:20:35,097 --> 00:20:37,078
我們必須仰賴外包

408
00:20:37,078 --> 00:20:41,921
所以我們還是得去找很多本身就在做這些事情的外包

409
00:20:41,921 --> 00:20:43,643
幫我們協助處理

410
00:20:43,643 --> 00:20:46,304
所有那種我們沒辦法處理的事情

411
00:20:46,304 --> 00:20:50,627
但是最後是在引擎裡面把它結合起來這個

412
00:20:50,627 --> 00:20:52,389
我們也做了一個三十萬面的

413
00:20:52,389 --> 00:20:55,331
三十萬面模型給那個Tesla Plus

414
00:20:55,331 --> 00:20:57,152
去展現他們的機能

415
00:20:57,152 --> 00:20:58,713
所以你可以看到

416
00:20:58,713 --> 00:21:00,674
如果你要做到車這種品質當然可以

417
00:21:00,674 --> 00:21:00,834
那面數

418
00:21:02,260 --> 00:21:05,361
這個我們給他們的Demo就是一個30萬年的Demo

419
00:21:05,361 --> 00:21:12,963
高模跟低模還是可以做到那種很不錯很不錯的那個Shader

420
00:21:12,963 --> 00:21:15,084
這個是50還有別的嗎?不知道為什麼

421
00:21:15,084 --> 00:21:16,605
示範示範

422
00:21:16,605 --> 00:21:19,886
沒關係它的場地不大

423
00:21:19,886 --> 00:21:21,726
那除了這件事情之外呢

424
00:21:21,726 --> 00:21:25,547
我們還有遇到兩個比較特別的情況

425
00:21:25,547 --> 00:21:30,029
第一個就是因為Unity本身跟那個Maya

426
00:21:31,245 --> 00:21:34,207
結合,就是因為它畢竟是吃FBX

427
00:21:34,207 --> 00:21:38,610
所以我們前一陣子發布了一個叫FBXExporter

428
00:21:38,610 --> 00:21:39,930
是可以兩邊連結在一起

429
00:21:39,930 --> 00:21:41,932
所以Maya跟Inerty之間

430
00:21:41,932 --> 00:21:43,973
串接可以非常容易

431
00:21:43,973 --> 00:21:45,554
問題是日漫的

432
00:21:45,554 --> 00:21:47,215
就是畫日漫

433
00:21:47,215 --> 00:21:49,917
尤其是畫日漫模型那些人

434
00:21:49,917 --> 00:21:53,839
其實沒有我們想像中用Maya的那麼多

435
00:21:53,839 --> 00:21:55,640
有很多奇奇怪怪的日本工具

436
00:21:55,640 --> 00:21:57,522
就是介面都是日文的那種

437
00:21:57,522 --> 00:21:59,443
由日本人發展出來的建模工具

438
00:22:00,180 --> 00:22:04,301
我們從來都沒看過 但是在日本非常流行 也非常多

439
00:22:04,301 --> 00:22:08,903
所以我們為了這一點 我們強迫自己把我們的開發工具

440
00:22:08,903 --> 00:22:14,006
就是我們找了建模師 可是他可能不擅長Maya

441
00:22:14,006 --> 00:22:19,648
但是我們為了要讓我們的流程 可以跟公司的流程去搭配

442
00:22:19,648 --> 00:22:25,090
所以我們強迫把我們自己的開發流程 從不是Maya轉到Maya

443
00:22:25,090 --> 00:22:26,811
所以就造就了一些困難

444
00:22:27,540 --> 00:22:31,721
花了很多時間,等於是浪費了一些時間在做熟悉

445
00:22:31,721 --> 00:22:32,901
在做熟悉

446
00:22:32,901 --> 00:22:38,962
所以還好我們有一個程式設計師幫我們做什麼事情呢?

447
00:22:38,962 --> 00:22:42,683
幫我們做Unity跟這一些我們叫DCCTool

448
00:22:42,683 --> 00:22:45,704
就是專門做建模的開發工具

449
00:22:45,704 --> 00:22:47,464
去做中間的轉換

450
00:22:47,464 --> 00:22:52,925
有即時線上看的,有這種可以模擬的工具

451
00:22:52,925 --> 00:22:53,245
比如說像這個

452
00:22:53,245 --> 00:22:53,265
像這個

453
00:23:00,170 --> 00:23:03,232
這個就是我剛剛講的

454
00:23:03,232 --> 00:23:05,353
建模師他是用他自己的工具在建模

455
00:23:05,353 --> 00:23:09,735
然後我們Unity裡面的工程師寫了一個外掛

456
00:23:09,735 --> 00:23:12,916
放到GitHub上面的可以去下載

457
00:23:12,916 --> 00:23:17,939
他可以即時去把Unity的那個Preview的畫面

458
00:23:17,939 --> 00:23:20,740
把它放到掛進他這個建模工具裡面

459
00:23:20,740 --> 00:23:23,061
所以他就可以即時的去看到說

460
00:23:23,061 --> 00:23:25,622
我現在在這個建模工具建的時候呢

461
00:23:25,622 --> 00:23:29,024
實際上未來在Unity應該會長什麼樣子

462
00:23:30,315 --> 00:23:34,278
所以他就比較不擔心我到時候會重工的次數太多

463
00:23:34,278 --> 00:23:38,321
我如果畫完了我交給專案小組去把它匯進去

464
00:23:38,321 --> 00:23:40,302
可能專案小組不是美術嘛 可能是程式或企劃

465
00:23:40,302 --> 00:23:42,804
匯進去之後他說 欸這不是我想要的

466
00:23:42,804 --> 00:23:44,566
然後又把檔案丟回來

467
00:23:44,566 --> 00:23:46,187
你又在這邊改改改 又丟過去

468
00:23:46,187 --> 00:23:48,949
就是我們以前比較常犯的錯誤

469
00:23:48,949 --> 00:23:51,530
那如果有這種預覽程式的話

470
00:23:51,530 --> 00:23:54,653
你就可以先把shader

471
00:23:54,653 --> 00:23:57,435
把shader跟一些其他東西掛上去 材質

472
00:23:57,435 --> 00:23:59,116
然後呢 在這邊建模的時候

473
00:23:59,492 --> 00:24:01,993
可以先看到未來會長什麼樣子

474
00:24:01,993 --> 00:24:05,234
那跟你的美術總監或者是PM討論

475
00:24:05,234 --> 00:24:07,435
這個樣子是不是你要的

476
00:24:07,435 --> 00:24:10,076
如果是,我們就繼續做下去

477
00:24:10,076 --> 00:24:13,918
所以就降低了很多重工的時間

478
00:24:13,918 --> 00:24:15,138
就是比較不錯

479
00:24:15,138 --> 00:24:19,900
而且這工具本身是已經把它放到GitHub上面

480
00:24:19,900 --> 00:24:24,062
我們所有今天的專案裡面所提到的工具類

481
00:24:24,062 --> 00:24:27,703
基本上都可以去Unity3D-JP

482
00:24:27,703 --> 00:24:28,383
就是日本的

483
00:24:28,832 --> 00:24:31,593
我們其實有很多個Github

484
00:24:31,593 --> 00:24:33,774
是Unity本家的Github

485
00:24:33,774 --> 00:24:36,836
Unity本家的Bitbucket

486
00:24:36,836 --> 00:24:38,777
Unity Japan

487
00:24:38,777 --> 00:24:39,757
Unity中國的

488
00:24:39,757 --> 00:24:41,878
中國的東西最少,日本的東西最多

489
00:24:41,878 --> 00:24:43,999
所以尤其是日本

490
00:24:43,999 --> 00:24:45,020
還有像Kinjiro

491
00:24:45,020 --> 00:24:47,121
他自己本身的那一種

492
00:24:47,121 --> 00:24:49,382
都可以去看一下他們的Github

493
00:24:49,382 --> 00:24:51,623
都有很多寶物

494
00:24:51,623 --> 00:24:53,664
除了這個之外呢

495
00:24:53,664 --> 00:24:54,705
還有做一個叫做

496
00:24:54,705 --> 00:24:57,266
Normal Painter

497
00:24:57,266 --> 00:24:58,527
Normal Painter的話

498
00:25:02,410 --> 00:25:04,712
就是Normal Painter本身是

499
00:25:04,712 --> 00:25:06,573
你在看到這個模型的時候啊

500
00:25:06,573 --> 00:25:10,136
它可以去直接幫你把Normal畫掉

501
00:25:10,136 --> 00:25:11,777
因為有些時候這個角度

502
00:25:11,777 --> 00:25:13,659
這個cut照過來

503
00:25:13,659 --> 00:25:16,261
我的陰影整片都要黑掉

504
00:25:16,261 --> 00:25:19,163
但是那個影形照不出來

505
00:25:19,163 --> 00:25:19,964
所以這個時候呢

506
00:25:19,964 --> 00:25:23,386
在這一片我就用這個Normal Painter去把它畫黑

507
00:25:23,386 --> 00:25:25,148
然後它陰影產生出來之後

508
00:25:25,148 --> 00:25:27,770
可能我下一個cut再把它移回來

509
00:25:27,770 --> 00:25:29,351
就會變成說

510
00:25:29,351 --> 00:25:30,112
這個角度這個陰影是對的

511
00:25:31,163 --> 00:25:33,444
下一個角度下一個陰影是對的

512
00:25:33,444 --> 00:25:38,767
所以我們可以在不同的幀數上面去制定說

513
00:25:38,767 --> 00:25:40,207
那個陰影應該長怎麼樣

514
00:25:40,207 --> 00:25:44,669
因為日本漫畫的模型它的陰影

515
00:25:44,669 --> 00:25:47,611
完全不是我們想像中該長的樣子

516
00:25:47,611 --> 00:25:48,451
可能是一條線

517
00:25:48,451 --> 00:25:51,152
我們可能會有那種照過來的時候會有

518
00:25:51,152 --> 00:25:53,273
因為耳朵照過來會有耳朵的形狀

519
00:25:53,273 --> 00:25:53,713
那種陰影

520
00:25:53,713 --> 00:25:54,194
它不是一條線

521
00:25:54,194 --> 00:25:56,995
然後整片都是單色

522
00:25:56,995 --> 00:25:59,436
所以是完全是不一樣的

523
00:25:59,854 --> 00:26:04,198
所以發展這個NodePanel也是在Github上面可以去下載

524
00:26:04,198 --> 00:26:06,780
可以下載,還不錯

525
00:26:06,780 --> 00:26:09,362
但是即便如此,我們雖然做得很辛苦

526
00:26:09,362 --> 00:26:12,845
整個時程大概也只是一年的時間

527
00:26:12,845 --> 00:26:15,527
我們從2016年年底開始吧

528
00:26:15,527 --> 00:26:17,788
開始思考說我們想做這件事情

529
00:26:17,788 --> 00:26:21,371
然後呢我們開始去製作建模

530
00:26:21,371 --> 00:26:23,073
那花最多時間就是

531
00:26:23,073 --> 00:26:25,274
建模完之後,因為建模還是繼續執行

532
00:26:25,274 --> 00:26:26,676
但是後期的動畫製作跟

533
00:26:34,335 --> 00:26:39,739
七、八個月時間來完成整段的動畫

534
00:26:39,739 --> 00:26:41,381
因為不能讓它有loading

535
00:26:41,381 --> 00:26:47,226
所以我們把所有的模型都塞在同一個場景裡面

536
00:26:47,226 --> 00:26:50,289
為了要讓這件事情可以解決

537
00:26:50,289 --> 00:26:52,331
我們做了很多設定

538
00:26:52,331 --> 00:26:54,233
還不錯的設定

539
00:26:54,233 --> 00:26:55,714
各位看到這個

540
00:26:55,714 --> 00:26:57,896
第一個你可能會覺得說

541
00:26:57,896 --> 00:27:00,278
時間感覺上好像變短

542
00:27:00,278 --> 00:27:00,478
正常來講

543
00:27:02,373 --> 00:27:04,054
動漫公司去看他們的製程

544
00:27:04,054 --> 00:27:06,155
他們大概也是差不多

545
00:27:06,155 --> 00:27:08,696
花很久的時間去做一個一集

546
00:27:08,696 --> 00:27:10,897
然後一集的預算大概是多少

547
00:27:10,897 --> 00:27:13,539
在這個專案裡面呢

548
00:27:13,539 --> 00:27:14,819
其實它不便宜

549
00:27:14,819 --> 00:27:16,220
因為我們剛剛講到

550
00:27:16,220 --> 00:27:16,961
我們花了很多時間

551
00:27:16,961 --> 00:27:20,783
測了之後發現很多地方還是得找外包

552
00:27:20,783 --> 00:27:23,304
所以我們找外包製作

553
00:27:23,304 --> 00:27:24,665
那整個專案

554
00:27:24,665 --> 00:27:26,566
我記得

555
00:27:26,566 --> 00:27:28,867
大概也

556
00:27:28,867 --> 00:27:30,028
應該有八九百萬台幣

557
00:27:31,284 --> 00:27:33,766
不便宜 但是我們覺得不便宜啦

558
00:27:33,766 --> 00:27:36,667
在日本的行業裡面

559
00:27:36,667 --> 00:27:37,328
剛好

560
00:27:37,328 --> 00:27:39,389
差不多就是做一級的錢

561
00:27:39,389 --> 00:27:41,530
差不多做一級的錢

562
00:27:41,530 --> 00:27:41,930
那

563
00:27:41,930 --> 00:27:45,953
Unity本身是出三個人

564
00:27:45,953 --> 00:27:47,233
就是Kohei

565
00:27:47,233 --> 00:27:49,254
Kohei就是我剛剛提到的

566
00:27:49,254 --> 00:27:50,795
他不會用Maya

567
00:27:50,795 --> 00:27:53,137
但是他其他的建模工具他非常厲害

568
00:27:53,137 --> 00:27:55,298
他本身就是美術很強的人

569
00:27:55,298 --> 00:27:56,679
但是他對Maya不熟

570
00:27:56,679 --> 00:27:57,879
就是日系的

571
00:27:57,879 --> 00:27:59,520
然後呢 NOBU

572
00:27:59,780 --> 00:28:05,361
Nobuyuki就是小林,他就是一開始製作Unity的那個人

573
00:28:05,361 --> 00:28:09,402
做Unity的模型,做Unity Shader

574
00:28:09,402 --> 00:28:09,562
這個人

575
00:28:09,562 --> 00:28:11,542
然後我們有一個Seiya,Seiya就非常強

576
00:28:11,542 --> 00:28:15,443
他程式很厲害,所以他基本上所有Unity的工具

577
00:28:15,443 --> 00:28:17,584
你可以看到Unity的體系有幾個人

578
00:28:17,584 --> 00:28:20,244
Kenjiro,Seiya,Hiroki

579
00:28:20,244 --> 00:28:23,585
還有另外一個,我忘了叫什麼

580
00:28:23,585 --> 00:28:28,826
就是這幾個的都是在Unity Japan的Github上面

581
00:28:29,557 --> 00:28:31,198
常常出現

582
00:28:31,198 --> 00:28:35,002
基本上整個Github上面的東西都是他們去做出來的

583
00:28:35,002 --> 00:28:36,603
或是他們去做出來的

584
00:28:36,603 --> 00:28:38,705
然後包括

585
00:28:38,705 --> 00:28:45,131
如果你有做從3D Max或其他的特效軟體去輸出那種特效級的

586
00:28:45,131 --> 00:28:46,392
.abc格式的

587
00:28:46,392 --> 00:28:50,916
那個Olympic格式的套件

588
00:28:50,916 --> 00:28:52,838
那個轉換套件是Seiya線

589
00:28:52,838 --> 00:28:54,559
所以這三個人是核心

590
00:28:56,020 --> 00:29:01,062
找了外包 我們找了Mandarin Labo去幫我們做背景音樂

591
00:29:01,062 --> 00:29:08,704
然後做特效音樂 然後做Reading 骨架 還有耳機特效

592
00:29:08,704 --> 00:29:12,906
所以我覺得大概預算就是花在這底下 Partner上面

593
00:29:12,906 --> 00:29:17,267
上面應該是 我們自己本家的人應該沒有花那麼多錢

594
00:29:17,267 --> 00:29:23,910
因為找Mandarin Labo應該就是不便宜的啦

595
00:29:23,910 --> 00:29:25,090
除了這些之外 包括整個團隊

596
00:29:26,310 --> 00:29:28,171
人其實加起來應該四五十個人

597
00:29:28,171 --> 00:29:30,631
就是如果我們說要列那種感謝函那種

598
00:29:30,631 --> 00:29:32,752
最後製作團員名單

599
00:29:32,752 --> 00:29:35,052
大概是四五十個人

600
00:29:35,052 --> 00:29:36,353
整體經驗

601
00:29:36,353 --> 00:29:37,673
我們發現就是說

602
00:29:37,673 --> 00:29:39,174
其實宮崎師有加快

603
00:29:39,174 --> 00:29:41,274
因為你剛剛看到從發想開始到結束

604
00:29:41,274 --> 00:29:42,134
大概一年

605
00:29:42,134 --> 00:29:43,335
一年之間

606
00:29:43,335 --> 00:29:44,075
然後呢

607
00:29:44,075 --> 00:29:45,595
我們發現到

608
00:29:45,595 --> 00:29:46,315
原本那個

609
00:29:46,315 --> 00:29:49,696
Kohei 他是對F-Zero Effect比較熟

610
00:29:49,696 --> 00:29:50,436
他非常

611
00:29:50,436 --> 00:29:51,156
因為美術有個

612
00:29:51,156 --> 00:29:53,537
有個

613
00:29:53,537 --> 00:29:53,557
特質

614
00:29:54,924 --> 00:30:00,706
他們會希望說接觸的新工具要長得像他舊工具

615
00:30:00,706 --> 00:30:03,387
這樣他轉換過程就不會那麼辛苦

616
00:30:03,387 --> 00:30:07,109
所以他本身是 After Effects 的開發者

617
00:30:07,109 --> 00:30:11,331
所以我們在 Unity 裡面的 Timeline 呢

618
00:30:11,331 --> 00:30:14,292
剛好就是比較類似 他就比較不會那麼害怕

619
00:30:14,292 --> 00:30:18,794
而且我們是嘗試著把本身在 After Effects 會用的技巧

620
00:30:18,794 --> 00:30:21,035
整個移植到 Timeline

621
00:30:21,035 --> 00:30:22,755
沒想到大部分都是可行的

622
00:30:23,294 --> 00:30:24,435
大部分都是可行

623
00:30:24,435 --> 00:30:26,676
那還做了很多透支布

624
00:30:26,676 --> 00:30:29,557
然後因為有FBX的Exporter

625
00:30:29,557 --> 00:30:33,079
所以透過Prefab跟Maya做橋樑

626
00:30:33,079 --> 00:30:35,641
等於是說你在Maya畫完之後

627
00:30:35,641 --> 00:30:38,422
可以轉到Unity裡面無痛

628
00:30:38,422 --> 00:30:41,504
然後現在從Unity裡面再轉回FBX

629
00:30:41,504 --> 00:30:42,304
也是無痛

630
00:30:42,304 --> 00:30:44,726
在Maya裡面可以看到1比1的模型

631
00:30:44,726 --> 00:30:49,869
包含動畫跟Collider碰撞體都會有

632
00:30:49,869 --> 00:30:51,509
後製也非常容易

633
00:30:51,509 --> 00:30:52,990
然後最後提到的就是製作素材

634
00:30:53,703 --> 00:30:56,744
因為這個模型經過Shader渲染之後

635
00:30:56,744 --> 00:30:59,005
看起來就不像低模了

636
00:30:59,005 --> 00:31:00,506
那既然不像低模

637
00:31:00,506 --> 00:31:02,367
我就可以把它放很大去

638
00:31:02,367 --> 00:31:04,988
依照市場部他要的角度

639
00:31:04,988 --> 00:31:06,929
跟字疊在一起拍一張照

640
00:31:06,929 --> 00:31:08,469
輸出之後把它輸出大一點

641
00:31:08,469 --> 00:31:10,350
可能是4Kx4K

642
00:31:10,350 --> 00:31:10,870
可以輸出海報

643
00:31:10,870 --> 00:31:12,811
可以做到這種程度

644
00:31:12,811 --> 00:31:16,533
因為本身動漫它並不是像一般那種3D動畫

645
00:31:16,533 --> 00:31:19,794
它那麼要求它的面數的預算

646
00:31:19,794 --> 00:31:20,535
因為都是4塊

647
00:31:20,535 --> 00:31:22,656
所以剩快多的情況下

648
00:31:22,656 --> 00:31:23,276
要解析度夠高

649
00:31:23,957 --> 00:31:27,959
它看起來還OK

650
00:31:27,959 --> 00:31:32,922
這個是 After Effects 的畫面

651
00:31:32,922 --> 00:31:34,883
這是 Timeline 的畫面

652
00:31:34,883 --> 00:31:37,144
我個人覺得差很多啦

653
00:31:37,144 --> 00:31:38,625
但是他們說差不多

654
00:31:38,625 --> 00:31:41,727
所以 OK 美術說了算

655
00:31:41,727 --> 00:31:42,407
我們認為說

656
00:31:42,407 --> 00:31:45,889
我們現在如果要把這個整套筆記去推給其他公司

657
00:31:45,889 --> 00:31:47,950
推給做動畫公司的話呢

658
00:31:47,950 --> 00:31:49,091
我們必須要讓他知道說

659
00:31:49,091 --> 00:31:51,012
哦 OK After Effects 能做的事情

660
00:31:51,012 --> 00:31:51,973
Unity Timeline 也可以做

661
00:31:52,589 --> 00:31:54,630
這樣他們轉換過來才比較不會害怕

662
00:31:54,630 --> 00:31:59,453
再加上一些教育 訓練 那應該就可以了

663
00:31:59,453 --> 00:32:00,934
所以以這個經驗來說是還不錯的

664
00:32:00,934 --> 00:32:04,515
而且這個就是一個用 After Effects 可以做出來的效果

665
00:32:04,515 --> 00:32:07,857
然後我們希望再套到 Unity 裡面呈現的感覺

666
00:32:07,857 --> 00:32:12,059
就是那個 比如說有點偏藍色的那種光暈

667
00:32:12,059 --> 00:32:17,002
然後我們在 我們希望把這一個整層的感覺

668
00:32:17,002 --> 00:32:19,023
是用 Unity 的 Timeline 來做

669
00:32:19,023 --> 00:32:20,404
然後我們就是嘗試著用

670
00:32:21,125 --> 00:32:21,985
音樂體裡面內建來做

671
00:32:21,985 --> 00:32:24,445
大概的感覺會像這樣

672
00:32:24,445 --> 00:32:25,606
但是呢

673
00:32:25,606 --> 00:32:27,766
我們就很單純做一件事情而已

674
00:32:27,766 --> 00:32:30,787
我們就是用一個UI Layer

675
00:32:30,787 --> 00:32:32,367
打在後面

676
00:32:32,367 --> 00:32:33,168
所以呢

677
00:32:33,168 --> 00:32:35,528
從那個UI就可以看到

678
00:32:35,528 --> 00:32:37,729
感覺上就是有光打在

679
00:32:37,729 --> 00:32:39,529
我那個主角上面

680
00:32:39,529 --> 00:32:41,249
一層UI就解決了

681
00:32:41,249 --> 00:32:43,810
所以實際上那一個場景

682
00:32:43,810 --> 00:32:45,330
有一層UI在這裡

683
00:32:45,330 --> 00:32:46,671
然後你從後面看的時候呢

684
00:32:46,671 --> 00:32:48,471
你就會感受到他身上有

685
00:32:48,471 --> 00:32:50,011
那一些紅光跟藍光出現

686
00:32:51,001 --> 00:32:53,382
比我們預期的還要好

687
00:32:53,382 --> 00:32:55,563
所以我們覺得說OK

688
00:32:55,563 --> 00:32:57,584
如果你要用UR去疊一些特效

689
00:32:57,584 --> 00:32:59,145
然後要從後面看

690
00:32:59,145 --> 00:33:01,046
不管是2D還是3D

691
00:33:01,046 --> 00:33:02,867
就我們這個製程是OK的

692
00:33:02,867 --> 00:33:05,328
因為我們並不是讓人家戴VR眼鏡在裡面看

693
00:33:05,328 --> 00:33:06,968
我們是那個cut

694
00:33:06,968 --> 00:33:09,530
一定鏡頭就是長那個樣子

695
00:33:09,530 --> 00:33:10,870
從這個角度出去

696
00:33:10,870 --> 00:33:12,771
這樣子你就可以用很多

697
00:33:12,771 --> 00:33:15,993
原本在傳統製程裡面可以做假的技術

698
00:33:15,993 --> 00:33:18,334
再用在這個新製程裡面

699
00:33:18,334 --> 00:33:20,095
而且這個專案裡面用了非常多這種技巧

700
00:33:22,109 --> 00:33:25,251
例子特效效果比AE還好

701
00:33:25,251 --> 00:33:27,733
我們覺得,因為AE畢竟是畫實的嘛

702
00:33:27,733 --> 00:33:32,816
例子特效還有一些場景的計算

703
00:33:32,816 --> 00:33:37,379
然後我們用大量的Post Effect,就是後製

704
00:33:37,379 --> 00:33:39,921
現在後製還可以區分區域了

705
00:33:39,921 --> 00:33:42,582
這個專案它的後製有點特別

706
00:33:42,582 --> 00:33:46,325
就是它改善了非常多原本看起來不好的地方

707
00:33:46,325 --> 00:33:47,666
比如說像這個

708
00:33:47,666 --> 00:33:50,027
這一幕是那個門慢慢地打開

709
00:33:53,402 --> 00:33:54,663
去算的話

710
00:33:54,663 --> 00:33:57,825
因為你打開之後會有很多光照計算

711
00:33:57,825 --> 00:34:00,087
所以打在你臉上的應該是整面

712
00:34:00,087 --> 00:34:03,810
你會覺得整個有點像光暈那種亮度的感覺

713
00:34:03,810 --> 00:34:06,633
你的整個臉應該是統一的亮度

714
00:34:06,633 --> 00:34:08,214
但是在日漫

715
00:34:08,214 --> 00:34:10,136
它要有一條很明顯的線嘟嘟嘟嘟嘟嘟嘟嘟嘟

716
00:34:10,136 --> 00:34:12,978
做不到

717
00:34:12,978 --> 00:34:14,780
引擎做不到

718
00:34:14,780 --> 00:34:16,961
所以呢我們在這邊做很多透視度

719
00:34:16,961 --> 00:34:19,383
然後各位可以先看一下

720
00:34:19,383 --> 00:34:20,324
這個是那個後製特效

721
00:34:24,432 --> 00:34:29,073
打開來之後,你就會感覺從光從後面透出來

722
00:34:29,073 --> 00:34:34,534
所以這是後製,我們在裡面很多地方都用後製來解決這一類問題

723
00:34:34,534 --> 00:34:43,837
然後剛剛提到的這個,就是我們用一片2D的圖片放在這個人的臉上

724
00:34:43,837 --> 00:34:50,759
但是鏡頭在這片的前面,所以鏡頭看不到這一片,假的

725
00:34:50,759 --> 00:34:52,159
然後這一片本身是個動畫

726
00:34:52,159 --> 00:34:53,340
哒哒哒哒哒

727
00:34:54,995 --> 00:34:57,397
而且還有齒輪

728
00:34:57,397 --> 00:34:57,638
還可以做到齒輪

729
00:34:57,638 --> 00:35:01,801
然後你就會看動畫就覺得說

730
00:35:01,801 --> 00:35:03,422
對!這就是字漫

731
00:35:03,422 --> 00:35:04,563
那你以前算不出來

732
00:35:04,563 --> 00:35:08,907
所以你必須要用這種奇怪作假的方式來製作

733
00:35:08,907 --> 00:35:10,008
然後呢

734
00:35:10,008 --> 00:35:12,310
所有鏡頭照不到的地方

735
00:35:12,310 --> 00:35:14,592
都是預設的

736
00:35:14,592 --> 00:35:16,894
可能你會看到T-pose可是照臉

737
00:35:16,894 --> 00:35:17,154
但是呢

738
00:35:20,573 --> 00:35:23,495
只要鏡頭照不到的地方 我們就盡量不要去做處理

739
00:35:23,495 --> 00:35:25,775
因為就是浪費資源

740
00:35:25,775 --> 00:35:29,297
不像是除非你要做那種整個場景即時運算

741
00:35:29,297 --> 00:35:32,498
如果是說這個場景是永遠都是固定的

742
00:35:32,498 --> 00:35:36,419
那很多作弊的方式就可以製作

743
00:35:36,419 --> 00:35:38,940
這個是我們在那個Maya裡面做轉換的部分

744
00:35:38,940 --> 00:35:44,202
然後我們從Maya裡面把模型轉進來的時候

745
00:35:44,202 --> 00:35:45,763
因為兩邊可以連動

746
00:35:45,763 --> 00:35:49,044
然後我剛剛有提到幾個要點

747
00:35:49,044 --> 00:35:49,504
第一個就是

748
00:35:51,797 --> 00:35:53,238
鏡頭沒照到的地方

749
00:35:53,238 --> 00:35:55,099
我們不會額外做設定

750
00:35:55,099 --> 00:35:57,421
那你可以看到其實右邊這張圖

751
00:35:57,421 --> 00:35:58,681
你會感覺還蠻合理的

752
00:35:58,681 --> 00:36:00,483
一個男生抱著一個女生

753
00:36:00,483 --> 00:36:02,224
但是如果我鏡頭一轉開的話

754
00:36:02,224 --> 00:36:04,425
其實她是浮在空中

755
00:36:04,425 --> 00:36:06,687
因為當時這個女生是在空中

756
00:36:06,687 --> 00:36:08,928
就是她那個六個翅膀打開的時候

757
00:36:08,928 --> 00:36:09,809
她是浮在空中

758
00:36:09,809 --> 00:36:13,191
所以我們連角色的位移都懶得做的時候

759
00:36:13,191 --> 00:36:17,214
我們就直接在那個位置播放她躺下來的動畫

760
00:36:17,214 --> 00:36:17,954
那個男生抱著她

761
00:36:18,347 --> 00:36:21,128
所以整體上是那個男生抱她可是扶不在胸中

762
00:36:21,128 --> 00:36:23,328
但是假裝是踩在地上

763
00:36:23,328 --> 00:36:25,029
所以鏡頭不要照到就好

764
00:36:25,029 --> 00:36:26,829
然後你可以看到右邊這邊

765
00:36:26,829 --> 00:36:28,890
有很多清單

766
00:36:28,890 --> 00:36:30,590
我們剛剛有提到

767
00:36:30,590 --> 00:36:32,691
由於一個場景

768
00:36:32,691 --> 00:36:34,651
不能有loading

769
00:36:34,651 --> 00:36:37,332
因為有loading的話你就是要拆scene

770
00:36:37,332 --> 00:36:38,252
拆場景

771
00:36:38,252 --> 00:36:40,532
但是如果你要同

772
00:36:40,532 --> 00:36:43,333
不要loading的話你就全部必須放在同一個場景

773
00:36:43,333 --> 00:36:44,453
所以我們的做法呢

774
00:36:44,453 --> 00:36:46,654
我們採用每一隻角色

775
00:36:46,654 --> 00:36:47,434
比如說是我們在

776
00:36:47,993 --> 00:36:50,874
真實世界拍連續劇的演員

777
00:36:50,874 --> 00:36:54,055
所以他有男一男二女一女二對不對

778
00:36:54,055 --> 00:36:57,356
然後全部都放在character這個目錄裡面

779
00:36:57,356 --> 00:37:00,737
排好所有的角色要演的人

780
00:37:00,737 --> 00:37:02,878
通通在這裡面一個一個排好

781
00:37:02,878 --> 00:37:05,958
但是沒你的事的時候就是影集

782
00:37:05,958 --> 00:37:10,140
然後底下這邊有一個chapter

783
00:37:10,140 --> 00:37:12,040
就是01第一章第二章

784
00:37:12,040 --> 00:37:13,721
第一節第二節第三節

785
00:37:13,721 --> 00:37:16,481
那個每個cut每個cut scene要處理的事情

786
00:37:16,481 --> 00:37:17,262
他把所有的

787
00:37:17,734 --> 00:37:19,755
Casting要處理的事情

788
00:37:19,755 --> 00:37:21,436
哪一座橋模型要打開

789
00:37:21,436 --> 00:37:25,438
哪一個人要從上面的Character移下來

790
00:37:25,438 --> 00:37:26,619
放到哪個位置

791
00:37:26,619 --> 00:37:27,420
然後開始播什麼動畫

792
00:37:27,420 --> 00:37:29,881
用TimeLapse播什麼動畫

793
00:37:29,881 --> 00:37:32,303
然後他走出去之後講什麼話

794
00:37:32,303 --> 00:37:33,284
講完之後沒他的事了

795
00:37:33,284 --> 00:37:34,564
他就消失 隱形起來

796
00:37:34,564 --> 00:37:37,847
回到上面他該有的位置

797
00:37:37,847 --> 00:37:42,289
所以整個場景其實就是不斷的開啟物件

798
00:37:42,289 --> 00:37:44,871
放到對的位置開始演

799
00:37:44,871 --> 00:37:45,932
鏡頭追著他跑

800
00:37:45,932 --> 00:37:47,052
然後結束之後鏡頭換另外一個鏡頭

801
00:37:47,869 --> 00:37:50,331
然後換另外一個角色飛過來這邊演

802
00:37:50,331 --> 00:37:52,913
然後演完就消失

803
00:37:52,913 --> 00:37:55,494
然後中間該疊2D、3D的

804
00:37:55,494 --> 00:37:57,536
該做特效的把它處理完

805
00:37:57,536 --> 00:37:58,296
所以有很多鏡頭

806
00:37:58,296 --> 00:38:01,399
透過Cinemachine去做處理

807
00:38:01,399 --> 00:38:03,580
所以每一個時間點到了

808
00:38:03,580 --> 00:38:04,801
導演就相當於導演說

809
00:38:04,801 --> 00:38:07,883
咔 然後下一組人馬進來

810
00:38:07,883 --> 00:38:10,125
開始演 演完之後咔 下一組人馬進來

811
00:38:10,125 --> 00:38:10,985
退場

812
00:38:10,985 --> 00:38:12,767
只是在影集裡面呢

813
00:38:12,767 --> 00:38:16,629
那些換裝的機制全部都沒有時間

814
00:38:16,629 --> 00:38:17,050
全部都是即時

815
00:38:17,707 --> 00:38:18,908
全部都是即時

816
00:38:18,908 --> 00:38:24,571
所以我們有分人物組跟分鏡組這兩個目錄

817
00:38:24,571 --> 00:38:28,053
那我們覺得是 使用起來覺得非常好

818
00:38:28,053 --> 00:38:30,494
因為 第一個它清楚

819
00:38:30,494 --> 00:38:33,556
如果你在製作這個過程之中

820
00:38:33,556 --> 00:38:37,458
你的美術還是不斷的在修改模型的時候

821
00:38:37,458 --> 00:38:38,078
不會有問題

822
00:38:38,078 --> 00:38:40,800
因為所有的Maya裡面的模型

823
00:38:40,800 --> 00:38:44,922
都是參照Character這裡面所有的角色

824
00:38:44,922 --> 00:38:45,102
所以變成說

825
00:38:46,460 --> 00:38:48,821
這邊的角色被Maya那邊取代之後呢

826
00:38:48,821 --> 00:38:50,102
他會換新的

827
00:38:50,102 --> 00:38:51,923
然後他在Costume這邊

828
00:38:51,923 --> 00:38:54,884
他就會直接變成用新的角色去呈現

829
00:38:54,884 --> 00:38:58,026
所以不會有重工的問題

830
00:38:58,026 --> 00:39:00,967
不會有那種重複製作的問題

831
00:39:00,967 --> 00:39:04,149
單純就是美術負責把人物組裡面的角色

832
00:39:04,149 --> 00:39:06,490
一直不斷的更新到最完美為止

833
00:39:06,490 --> 00:39:08,111
然後呢

834
00:39:08,111 --> 00:39:09,152
編劇組這邊就會開始編排底下

835
00:39:09,152 --> 00:39:13,774
這個每一個Costume他要的行為

836
00:39:13,774 --> 00:39:14,715
然後他可以先用

837
00:39:15,332 --> 00:39:19,175
方塊去取代男一該做的事情

838
00:39:19,175 --> 00:39:22,078
就是有點像是替身

839
00:39:22,078 --> 00:39:23,899
然後演完之後覺得OK了

840
00:39:23,899 --> 00:39:26,802
再把人物組裡面的直接把它引入

841
00:39:26,802 --> 00:39:28,503
它就直接去播

842
00:39:28,503 --> 00:39:31,486
所以整體上我們覺得這個製程還不錯

843
00:39:31,486 --> 00:39:37,010
而且是可以取代很多原本傳統重複重複的製程

844
00:39:37,010 --> 00:39:40,553
所以我們直接就是在第四期工具來編修模型

845
00:39:40,553 --> 00:39:42,535
回存到上面的人物組

846
00:39:42,535 --> 00:39:43,176
流程會變得非常簡單

847
00:39:46,713 --> 00:39:48,855
然後這是我剛剛提到的2D特效

848
00:39:48,855 --> 00:39:51,017
因為2D特效如果你要做特效

849
00:39:51,017 --> 00:39:53,038
用那個Particle的話其實不好做

850
00:39:53,038 --> 00:39:55,300
最簡單的方式就是

851
00:39:55,300 --> 00:39:57,361
我們就把它當作是後製

852
00:39:57,361 --> 00:39:59,383
就是疊在最後面

853
00:39:59,383 --> 00:40:01,104
然後呢最後把它用

854
00:40:01,104 --> 00:40:02,865
一片UI

855
00:40:02,865 --> 00:40:04,427
透過鏡頭去看

856
00:40:04,427 --> 00:40:06,408
就會長得像中間這樣

857
00:40:06,408 --> 00:40:08,390
那底下這個很大一塊這個就是

858
00:40:08,390 --> 00:40:10,971
Timeline的畫面

859
00:40:10,971 --> 00:40:12,493
所以你可以看到說它

860
00:40:12,493 --> 00:40:13,273
有一個Image4號

861
00:40:15,154 --> 00:40:16,175
做這個處理

862
00:40:16,175 --> 00:40:18,557
然後它在幾分幾秒會跑出來

863
00:40:18,557 --> 00:40:20,579
幾分幾秒會消失

864
00:40:20,579 --> 00:40:21,840
那中間鏡頭剛好就是卡在那裡

865
00:40:21,840 --> 00:40:23,721
你就可以看到整個過場的結果

866
00:40:23,721 --> 00:40:27,044
所以2D特效我們基本上幾乎

867
00:40:27,044 --> 00:40:29,386
全部都是用手工繪的

868
00:40:29,386 --> 00:40:31,248
找外發幫我們做的

869
00:40:31,248 --> 00:40:33,930
並完全沒有用到那個特效

870
00:40:33,930 --> 00:40:35,771
沒有用到一個裡面的特效

871
00:40:35,771 --> 00:40:35,992
就是長這樣

872
00:40:35,992 --> 00:40:38,734
所以你可以看到

873
00:40:38,734 --> 00:40:39,555
只要鏡頭拍不到的地方

874
00:40:44,024 --> 00:40:50,206
但是實際上鏡頭拍到的地方就會變得非常完美

875
00:40:50,206 --> 00:40:57,209
也可以把2D的圖當作一片照片

876
00:40:57,209 --> 00:40:59,129
把它貼在3D場景裡面

877
00:40:59,129 --> 00:41:01,650
一樣可以製作出同樣的感覺

878
00:41:01,650 --> 00:41:05,551
只不過因為我剛剛的Mac那一塊沒有處理好

879
00:41:05,551 --> 00:41:07,032
所以顯示不出來

880
00:41:07,032 --> 00:41:08,713
會變得很奇怪

881
00:41:08,713 --> 00:41:09,233
超方便的

882
00:41:11,918 --> 00:41:15,160
那大圖輸出就是我剛剛提到的

883
00:41:15,160 --> 00:41:18,821
你可以把整個模型輸出很大

884
00:41:18,821 --> 00:41:23,242
然後最後今天市場部想要這個畫面

885
00:41:23,242 --> 00:41:24,323
你輸出給他

886
00:41:24,323 --> 00:41:27,784
明天你可以輸出另外一個角度給他

887
00:41:27,784 --> 00:41:29,464
這個對於市場部比較有利

888
00:41:29,464 --> 00:41:32,185
因為有時候我們往往會遇到一個問題

889
00:41:32,185 --> 00:41:34,166
就是我們沒有設定稿

890
00:41:34,166 --> 00:41:37,467
所以必須要有畫這種輸出圖稿的人

891
00:41:37,467 --> 00:41:38,587
美術佔一個名額來畫

892
00:41:40,342 --> 00:41:45,046
那如果遊戲上線了 或是你的產品上線了 動畫上線之後

893
00:41:45,046 --> 00:41:47,408
市場部來跟你要這些圖 你沒有的時候

894
00:41:47,408 --> 00:41:50,710
那就GG了 就是壞來不及

895
00:41:50,710 --> 00:41:55,294
那你能給他就是有Gameplay畫面 就醜醜的 佔你母親

896
00:41:55,294 --> 00:41:58,156
那這種的話就還好 因為剛好是日漫風格

897
00:41:58,156 --> 00:42:03,320
所以在整體上的 你可以輸出完之後再用ForeShot處理

898
00:42:03,320 --> 00:42:04,961
它並不會差別太多

899
00:42:04,961 --> 00:42:06,962
它會比較接近市場部想要的

900
00:42:06,962 --> 00:42:08,864
所以像這個就幾乎沒有修飾的情況下

901
00:42:09,640 --> 00:42:12,502
把角色放到對的位置之後去輸出

902
00:42:12,502 --> 00:42:19,284
它就可以達到市場部想要的那一個感覺

903
00:42:19,284 --> 00:42:21,785
那我們整體的經驗有幾個可以分享

904
00:42:21,785 --> 00:42:23,286
第一個

905
00:42:23,286 --> 00:42:25,927
雖然我們有新功能叫 TimeLine 跟 CineMachine

906
00:42:25,927 --> 00:42:30,389
但其實跟 Maya 那一端的建模流程是完全沒有影響

907
00:42:30,389 --> 00:42:31,049
不大搭

908
00:42:31,049 --> 00:42:33,630
所以其實原本如果你傳統製程建模要花多少時間

909
00:42:34,710 --> 00:42:37,192
基本上新字成也差不多 因為都是一樣的東西

910
00:42:37,192 --> 00:42:41,114
只不過缺的部分可能稍微可以少一點

911
00:42:41,114 --> 00:42:45,537
因為缺的人處理的東西比較沒有那麼多

912
00:42:45,537 --> 00:42:49,880
然後呢 最主要是最底下

913
00:42:49,880 --> 00:42:54,202
就是我們遇到所有的做日本漫畫的廠商

914
00:42:54,202 --> 00:42:57,064
他對於這種新字成是非常害怕的

915
00:42:57,064 --> 00:43:00,686
因為基本上就顛覆他所有原本在做的事情

916
00:43:00,686 --> 00:43:01,787
所以你要讓

917
00:43:05,225 --> 00:43:07,845
開發者換成新製程這件事情

918
00:43:07,845 --> 00:43:09,326
沒有辦法那麼快

919
00:43:09,326 --> 00:43:12,827
我們覺得應該是很多原因

920
00:43:12,827 --> 00:43:14,047
變得非常自由

921
00:43:14,047 --> 00:43:15,647
自由到你不知道從何開始

922
00:43:15,647 --> 00:43:18,968
然後整個畫面都要重學

923
00:43:18,968 --> 00:43:21,028
因為你工具不熟

924
00:43:21,028 --> 00:43:23,969
跟還沒有一個大頭

925
00:43:23,969 --> 00:43:26,650
開始採用這新的製程來用

926
00:43:26,650 --> 00:43:27,690
就台灣比較有這種情況

927
00:43:27,690 --> 00:43:29,530
台灣大部分遊戲公司會問

928
00:43:32,547 --> 00:43:35,690
比如說我們去推廣 他們問說

929
00:43:35,690 --> 00:43:40,253
我們現在做這個遊戲 台灣哪家大公司做的

930
00:43:40,253 --> 00:43:42,955
如果他們也弄的話我們考慮

931
00:43:42,955 --> 00:43:43,976
就是會有這種情況

932
00:43:43,976 --> 00:43:47,719
所以我覺得是製程上都會有這種問題

933
00:43:47,719 --> 00:43:50,381
原則上我認為這是個方向

934
00:43:50,381 --> 00:43:55,325
然後各位可以等日本那邊開始有

935
00:43:55,325 --> 00:43:57,627
真的做專業的動漫公司

936
00:43:57,627 --> 00:43:59,308
開始做大量的這種製程的時候

937
00:44:00,020 --> 00:44:02,641
你們就可以開始投入了

938
00:44:02,641 --> 00:44:05,261
因為畢竟那邊已經把該錯的都錯掉了

939
00:44:05,261 --> 00:44:07,762
然後把該修的都修掉了

940
00:44:07,762 --> 00:44:09,483
所以比較沒有這個問題

941
00:44:09,483 --> 00:44:12,864
而且它對於製作遊戲來講

942
00:44:12,864 --> 00:44:15,284
簡單度、難易度稍微容易一點

943
00:44:15,284 --> 00:44:19,105
因為它沒有太多程式要去處理

944
00:44:19,105 --> 00:44:21,666
所以它的坑採得比較少

945
00:44:21,666 --> 00:44:22,486
所以比較簡單一點

946
00:44:22,486 --> 00:44:23,827
對於傳統製程來講的話

947
00:44:23,827 --> 00:44:24,347
幫助是蠻大的

948
00:44:28,242 --> 00:44:30,944
但是我們也犯了很多錯

949
00:44:30,944 --> 00:44:31,964
就是我剛剛講的

950
00:44:31,964 --> 00:44:35,986
因為它是必須要在同一個場景計算

951
00:44:35,986 --> 00:44:39,448
所以如果我們在引擎裡面沒有所謂的

952
00:44:39,448 --> 00:44:42,389
把很多SIM同時串在一起

953
00:44:42,389 --> 00:44:44,610
把它做優化

954
00:44:44,610 --> 00:44:47,692
沒有一個loading時間的機制

955
00:44:47,692 --> 00:44:49,433
沒辦法做場景同步

956
00:44:49,433 --> 00:44:53,115
就代表你所有東西都必須要塞在同一個場景

957
00:44:53,115 --> 00:44:54,555
管理不易

958
00:44:54,555 --> 00:44:56,817
那我們今天這只是做了幾分鐘的動畫而已

959
00:44:58,918 --> 00:45:03,520
如果你是要做半小時 甚至要做很多很多時間的

960
00:45:03,520 --> 00:45:07,902
你要希望是中間沒有loading time

961
00:45:07,902 --> 00:45:09,583
那這個就會是一個挑戰 尤其是大場面

962
00:45:09,583 --> 00:45:11,644
當你的物體非常多 當你有

963
00:45:11,644 --> 00:45:13,165
你說你要做個萬人國戰

964
00:45:13,165 --> 00:45:18,067
然後上面有很多不同的角色 在一個場景裡面打來打去

965
00:45:18,067 --> 00:45:20,208
你的鏡頭希望在裡面切來切去

966
00:45:20,208 --> 00:45:22,709
鏡頭本身不是問題 是當你物件那麼多的時候

967
00:45:22,709 --> 00:45:26,872
可能在同一個場景 你還是要做一些LOD 要做一些優化

968
00:45:28,128 --> 00:45:29,829
然後剛剛提到的

969
00:45:29,829 --> 00:45:30,869
對動漫的熱情

970
00:45:30,869 --> 00:45:33,190
如果沒有對動漫的熱情

971
00:45:33,190 --> 00:45:34,190
不要來做這種

972
00:45:34,190 --> 00:45:36,930
因為你不知道你做出來的東西

973
00:45:36,930 --> 00:45:40,331
是不是動漫仔喜歡的

974
00:45:40,331 --> 00:45:42,011
所以一千個小時

975
00:45:42,011 --> 00:45:44,912
是我們覺得應該有的基本

976
00:45:44,912 --> 00:45:46,412
勝選DCT工具是我們犯的錯

977
00:45:46,412 --> 00:45:49,133
如果你有Maya製作經驗的話

978
00:45:49,133 --> 00:45:50,413
來做這個是最好的

979
00:45:50,413 --> 00:45:51,833
如果沒有的話呢

980
00:45:51,833 --> 00:45:53,974
那你要小心評估

981
00:45:53,974 --> 00:45:54,714
要不要轉Maya

982
00:45:57,772 --> 00:46:01,873
我們的modeling的人不懂 不熟Maya 但是他選

983
00:46:01,873 --> 00:46:06,035
因為公司的政策選擇的Maya 反而讓這個整個進度拖慢了一些

984
00:46:06,035 --> 00:46:06,795
這是我們的經驗

985
00:46:06,795 --> 00:46:11,357
然後像這個 你可以看到就是 你看

986
00:46:11,357 --> 00:46:14,238
有很多 各位現在看這四張圖

987
00:46:14,238 --> 00:46:16,759
你會覺得 嗯 很合理啊

988
00:46:16,759 --> 00:46:19,140
但是引擎都是算不出來的

989
00:46:19,140 --> 00:46:24,062
像這個 光的樣式 影子的樣式 都是算不出來的

990
00:46:27,637 --> 00:46:30,618
這個是沒有鏡頭的概念 沒有燈光的概念

991
00:46:30,618 --> 00:46:34,340
一切都是美術 美術碩算

992
00:46:34,340 --> 00:46:37,282
所以美術說 這個影影應該長這樣

993
00:46:37,282 --> 00:46:39,963
它就是長這樣是對的

994
00:46:39,963 --> 00:46:41,944
影形算不出來嘛

995
00:46:41,944 --> 00:46:45,686
因為下一個場景可能就完全不一樣了

996
00:46:45,686 --> 00:46:51,669
比如說這個背景完全是有點藍色 綠藍色的光

997
00:46:51,669 --> 00:46:54,311
但是實際上可能太陽光是黃色而已

998
00:46:54,311 --> 00:46:55,992
但是它打造出這個光

999
00:46:55,992 --> 00:46:56,892
是為了營造出

1000
00:46:57,235 --> 00:46:57,615
感覺

1001
00:46:57,615 --> 00:47:00,537
但是我們覺得OK

1002
00:47:00,537 --> 00:47:02,538
可是實際上已經算不出來

1003
00:47:02,538 --> 00:47:05,680
或者是你必須要營造出很多浪費資源的東西

1004
00:47:05,680 --> 00:47:08,042
來為了算那個東西出來

1005
00:47:08,042 --> 00:47:10,724
這不是單純就是打光就能解決的

1006
00:47:10,724 --> 00:47:11,284
有很多東西

1007
00:47:11,284 --> 00:47:12,685
包括這個陰影的

1008
00:47:12,685 --> 00:47:13,746
你看這個陰影都是線條

1009
00:47:13,746 --> 00:47:18,269
都是你可以很明顯看到那個銳利的邊

1010
00:47:18,269 --> 00:47:19,830
但實際上這個是

1011
00:47:19,830 --> 00:47:21,211
這個銳利的邊

1012
00:47:21,211 --> 00:47:23,352
可能背景背後算得出來

1013
00:47:23,352 --> 00:47:24,833
但是你看到他頭

1014
00:47:24,833 --> 00:47:26,014
他頭有那個刺

1015
00:47:26,014 --> 00:47:26,474
有沒有

1016
00:47:26,932 --> 00:47:32,416
但它背後的陰影沒有孫悟空的那個角

1017
00:47:32,416 --> 00:47:33,857
所以算不出來

1018
00:47:33,857 --> 00:47:35,799
就是實際上你實際上會有很多障礙

1019
00:47:35,799 --> 00:47:40,863
你必須要用很多奇奇怪怪的方式去解決

1020
00:47:40,863 --> 00:47:44,166
但是為什麼要你看一千個小時才能來做

1021
00:47:44,166 --> 00:47:45,787
主要原因就是因為

1022
00:47:45,787 --> 00:47:48,429
起碼你有一個基本的概念

1023
00:47:48,429 --> 00:47:53,193
知道說這個是漫畫可以表現

1024
00:47:53,193 --> 00:47:54,414
或不能表現

1025
00:47:54,414 --> 00:47:55,635
你可以去分辨出

1026
00:47:56,480 --> 00:47:58,241
我現在美術做出這個場景

1027
00:47:58,241 --> 00:48:00,383
然後我覺得這哪裡不對了

1028
00:48:00,383 --> 00:48:01,924
如果這個東西沒有修好

1029
00:48:01,924 --> 00:48:03,105
它就不是日漫

1030
00:48:03,105 --> 00:48:06,868
那個要素只要存在就可以了

1031
00:48:06,868 --> 00:48:10,630
然後不可能只有3D

1032
00:48:10,630 --> 00:48:11,191
會有2D

1033
00:48:11,191 --> 00:48:13,312
因為你不可能全部都是3D

1034
00:48:13,312 --> 00:48:15,694
所以你的標準必須定在說

1035
00:48:15,694 --> 00:48:16,495
你雖然畫3D

1036
00:48:16,495 --> 00:48:18,777
可是你要把它當2D看待

1037
00:48:18,777 --> 00:48:20,098
你最後算出來的東西

1038
00:48:20,098 --> 00:48:21,979
你要把它當作是個平面

1039
00:48:21,979 --> 00:48:23,720
然後平面可以讓

1040
00:48:23,720 --> 00:48:25,582
看漫畫動畫的人接受

1041
00:48:25,582 --> 00:48:26,022
那個才是

1042
00:48:26,934 --> 00:48:29,875
動漫要的 雖然你模型是3D是為了方便

1043
00:48:29,875 --> 00:48:32,035
因為轉方向啊 算圖的時候方便

1044
00:48:32,035 --> 00:48:33,556
但是你要把它當2D來看

1045
00:48:33,556 --> 00:48:36,097
所以那個嘴巴 你看到那個嘴巴

1046
00:48:36,097 --> 00:48:37,377
你覺得這個嘴巴是正常的

1047
00:48:37,377 --> 00:48:38,978
但是你一轉面就不對了

1048
00:48:38,978 --> 00:48:40,438
可是這個3D裡面呢

1049
00:48:40,438 --> 00:48:42,819
它就是必須要一直不斷換貼圖

1050
00:48:42,819 --> 00:48:46,160
或者有額外的處理方式

1051
00:48:46,160 --> 00:48:47,561
比如說像這個

1052
00:48:47,561 --> 00:48:49,381
你看到最左邊這個就是

1053
00:48:49,381 --> 00:48:51,922
動漫仔認為對的嘴巴

1054
00:48:51,922 --> 00:48:52,783
然後中間這個就是

1055
00:48:53,588 --> 00:48:56,690
我們因為動漫宅想要看到嘴巴的角度

1056
00:48:56,690 --> 00:49:00,232
幫他調了一個該有的漂亮的眼睛

1057
00:49:00,232 --> 00:49:02,854
但是鏡頭一轉 臉就歪掉了

1058
00:49:02,854 --> 00:49:03,614
就是右邊這個

1059
00:49:03,614 --> 00:49:05,555
就實際上如果你是用

1060
00:49:05,555 --> 00:49:08,878
你是用引擎來算的話呢

1061
00:49:08,878 --> 00:49:10,178
這裡我們認為說

1062
00:49:10,178 --> 00:49:11,539
必須在引擎端

1063
00:49:11,539 --> 00:49:13,541
必須要有一些機制來處理

1064
00:49:13,541 --> 00:49:18,864
也就是要做一些模型的變形

1065
00:49:18,864 --> 00:49:19,664
這樣做模型變形

1066
00:49:19,664 --> 00:49:20,765
跟著鏡頭做變形

1067
00:49:20,765 --> 00:49:23,047
然後只要變形到很自然

1068
00:49:23,521 --> 00:49:25,942
然後效能又不會差太多

1069
00:49:25,942 --> 00:49:29,984
所以當我的鏡頭繞著這一個人在轉的時候

1070
00:49:29,984 --> 00:49:38,049
他的嘴巴、他的臉一定要看起來就像是一個漫畫仔該有看到的那個感覺

1071
00:49:38,049 --> 00:49:41,571
所以你可以看到最左邊這個是

1072
00:49:41,571 --> 00:49:46,453
你可以看到是在美式動漫是絕對看不到的畫面

1073
00:49:46,453 --> 00:49:50,415
但是在日式動漫是非常頻繁的

1074
00:49:50,415 --> 00:49:51,396
就是一定會有的畫面

1075
00:49:52,178 --> 00:49:54,460
但是在引擎算出來的時候呢

1076
00:49:54,460 --> 00:49:57,542
在這裡就會遇到非常多的困難

1077
00:49:57,542 --> 00:49:59,644
一般來說都是用貼圖去解決

1078
00:49:59,644 --> 00:50:02,306
可是你有可能還是希望說

1079
00:50:02,306 --> 00:50:06,630
這個嘴巴是實際上是有3D模的

1080
00:50:06,630 --> 00:50:10,093
有一些日本的廠商他會希望這樣

1081
00:50:10,093 --> 00:50:12,835
就是嘴巴會希望3D模

1082
00:50:12,835 --> 00:50:13,856
所以當你

1083
00:50:13,856 --> 00:50:15,577
其實我們的魚類脊樑本身

1084
00:50:15,577 --> 00:50:17,759
那個臉就是貼一片貼紙而已

1085
00:50:17,759 --> 00:50:20,221
在某些角度它就怪怪的

1086
00:50:20,221 --> 00:50:20,921
它就會怪怪的

1087
00:50:22,415 --> 00:50:25,096
那我們會把這個專案下載

1088
00:50:25,096 --> 00:50:27,697
放在那個Unity講的Blog裡面公開

1089
00:50:27,697 --> 00:50:30,018
我覺得應該不久了

1090
00:50:30,018 --> 00:50:31,859
12月大不了

1091
00:50:31,859 --> 00:50:34,380
就會放出來 整個專案放出來

1092
00:50:34,380 --> 00:50:36,061
然後會包含那個角色

1093
00:50:36,061 --> 00:50:38,102
可能會不會像我今天這個粗糙的

1094
00:50:38,102 --> 00:50:39,903
就是會包得更完美

1095
00:50:39,903 --> 00:50:43,024
然後會把它變成各自的Essay

1096
00:50:43,024 --> 00:50:44,225
然後會把它公開

1097
00:50:44,225 --> 00:50:45,685
出來下載

1098
00:50:45,685 --> 00:50:48,647
這是我們日本慣用的

1099
00:50:48,647 --> 00:50:50,107
那這個專案本身還用了一些技術

1100
00:50:50,107 --> 00:50:51,188
就是我們有Recorder

1101
00:50:51,842 --> 00:50:56,245
它整個GameView算完之後它會變成一個MP4

1102
00:50:56,245 --> 00:50:57,987
這個也是由日本那邊去開發的

1103
00:50:57,987 --> 00:51:00,549
當初為了Adam Demo去做的

1104
00:51:00,549 --> 00:51:02,451
然後已經在Access Store上面可以下載

1105
00:51:02,451 --> 00:51:06,374
等於是你在把這個套件裝進去之後呢

1106
00:51:06,374 --> 00:51:09,617
你可以指定你的GameView去輸出成什麼格式

1107
00:51:09,617 --> 00:51:11,598
如果是Mac的話是什麼格式

1108
00:51:11,598 --> 00:51:13,740
如果是Windows的話可以什麼格式

1109
00:51:13,740 --> 00:51:15,622
然後可以是單張圖片的

1110
00:51:15,622 --> 00:51:17,543
就是連續的GIF檔

1111
00:51:17,543 --> 00:51:19,265
最後輸出的時候就是變成

1112
00:51:21,046 --> 00:51:24,647
變成 GameView 把它輸出出來

1113
00:51:24,647 --> 00:51:24,667
還不錯

1114
00:51:24,667 --> 00:51:24,707
很順

1115
00:51:24,707 --> 00:51:27,609
因為你如果直接用螢幕隔入

1116
00:51:27,609 --> 00:51:31,410
有時候沒辦法達到標準的FPS

1117
00:51:31,410 --> 00:51:33,051
就是可能30張打不到

1118
00:51:33,051 --> 00:51:34,391
可能很低啊

1119
00:51:34,391 --> 00:51:35,752
那用這個的話它是隔入

1120
00:51:35,752 --> 00:51:37,313
所以它會把你錄到你要的張數

1121
00:51:37,313 --> 00:51:39,193
然後我們還有一個

1122
00:51:39,193 --> 00:51:41,214
Alimbic Exporter

1123
00:51:41,214 --> 00:51:43,315
就是把特效輸出的

1124
00:51:43,315 --> 00:51:45,336
也是剛剛那個 Seiya 寫的

1125
00:51:45,336 --> 00:51:47,937
那這個也是幫助很大

1126
00:51:47,937 --> 00:51:48,677
OK

1127
00:51:48,677 --> 00:51:50,158
那我們剛剛看的是全螢幕對不對

1128
00:51:50,705 --> 00:51:52,186
我們現在來看

1129
00:51:52,186 --> 00:51:54,508
如果我把他整個場景都切給你看

1130
00:51:54,508 --> 00:51:57,190
你可以看到非常有趣

1131
00:51:57,190 --> 00:51:58,331
你可以看到幾點

1132
00:51:58,331 --> 00:52:00,152
第一個

1133
00:52:00,152 --> 00:52:03,134
角色照不到的地方

1134
00:52:03,134 --> 00:52:08,178
他不會有那個

1135
00:52:08,178 --> 00:52:12,742
你看他上面這個角度

1136
00:52:12,742 --> 00:52:14,983
有被看到對不對

1137
00:52:14,983 --> 00:52:15,844
底下角

1138
00:52:15,844 --> 00:52:17,465
地板沒有被照到他就不會有地板

1139
00:52:23,473 --> 00:52:25,374
然後他馬上就引擎

1140
00:52:25,374 --> 00:52:27,895
把所有剛剛場景引擎換另外場景

1141
00:52:27,895 --> 00:52:28,856
把另外的人放進來

1142
00:52:28,856 --> 00:52:31,717
有沒有

1143
00:52:31,717 --> 00:52:34,599
沒看到的地方他就不會照到

1144
00:52:34,599 --> 00:52:37,320
那實際上整個場景呢

1145
00:52:37,320 --> 00:52:38,621
都是在一起

1146
00:52:38,621 --> 00:52:42,623
而且還伴隨著很大的一個UI的

1147
00:52:42,623 --> 00:52:45,645
UI的畫面

1148
00:52:45,645 --> 00:52:48,606
所以他就是一個不斷切換模型

1149
00:52:48,606 --> 00:52:49,367
並表演的過程

1150
00:53:03,077 --> 00:53:10,502
照不到沒關係

1151
00:53:10,502 --> 00:53:12,523
他連表演都是這樣切的

1152
00:53:12,523 --> 00:53:14,224
但實際上最後

1153
00:53:14,224 --> 00:53:15,565
你會覺得他OK

1154
00:53:15,565 --> 00:53:17,626
是因為他鏡頭切好

1155
00:53:17,626 --> 00:53:19,287
所有穿幫的地方

1156
00:53:19,287 --> 00:53:21,048
他都不會讓你看到

1157
00:53:21,048 --> 00:53:21,428
就OK了

1158
00:53:22,589 --> 00:53:27,693
它變成是一個場景可以解決這些時間秒數的動畫

1159
00:53:27,693 --> 00:53:29,914
然後完成一個作品

1160
00:53:29,914 --> 00:53:32,536
那這樣的作品可以做到幾件事情

1161
00:53:32,536 --> 00:53:33,217
輸出MP4沒問題

1162
00:53:33,217 --> 00:53:39,521
Runtime去執行然後換衣服沒問題

1163
00:53:39,521 --> 00:53:40,162
但是鏡頭不能轉

1164
00:53:40,162 --> 00:53:46,066
所以它比較不適合用在鏡頭需要轉的那種內容

1165
00:53:46,066 --> 00:53:46,826
因為它很多的作品

1166
00:53:51,110 --> 00:53:54,292
這是今天我帶來的內容

1167
00:53:54,292 --> 00:53:57,274
然後

1168
00:53:57,274 --> 00:53:57,654
剛好

1169
00:53:57,654 --> 00:53:58,595
因為我剛

1170
00:53:58,595 --> 00:53:59,395
我昨天有跟那個

1171
00:53:59,395 --> 00:54:03,098
Johnson講就是

1172
00:54:03,098 --> 00:54:05,099
我今天帶這個項目來嘛

1173
00:54:05,099 --> 00:54:08,261
然後剛好我昨天收到我們公司的通知就是

1174
00:54:08,261 --> 00:54:09,442
我們在12月1號

1175
00:54:09,442 --> 00:54:09,902
會開始有一個

1176
00:54:09,902 --> 00:54:14,605
Neon Challenge比賽

1177
00:54:14,605 --> 00:54:15,886
我們不是有一個Neon

1178
00:54:15,886 --> 00:54:17,447
那個就是一堆Asset

1179
00:54:17,447 --> 00:54:19,629
Store上面買來Asset組合起來的

1180
00:54:19,629 --> 00:54:20,029
那個那個

1181
00:54:20,734 --> 00:54:22,495
很漂亮的場景

1182
00:54:22,495 --> 00:54:24,915
那我們現在在12月1號啊

1183
00:54:24,915 --> 00:54:27,816
我們會有一個比賽

1184
00:54:27,816 --> 00:54:28,537
這個是這樣子的

1185
00:54:28,537 --> 00:54:31,638
就是12月1號開始到1月15號

1186
00:54:31,638 --> 00:54:31,978
45天的時間

1187
00:54:31,978 --> 00:54:34,658
然後呢 我們辦了一個比賽

1188
00:54:34,658 --> 00:54:36,039
現在還沒開始嘛

1189
00:54:36,039 --> 00:54:36,899
我現在各位知道

1190
00:54:36,899 --> 00:54:38,720
它的比較條件就是說

1191
00:54:38,720 --> 00:54:42,781
你從所有ASAP Store上面買的ASAP

1192
00:54:42,781 --> 00:54:43,741
去組合起來

1193
00:54:43,741 --> 00:54:46,602
組合一個Neon

1194
00:54:46,602 --> 00:54:47,182
然後呢

1195
00:54:47,182 --> 00:54:48,643
拿來投稿

1196
00:54:48,643 --> 00:54:49,823
投稿第一名是

1197
00:54:52,542 --> 00:54:54,382
60萬台幣

1198
00:54:54,382 --> 00:54:55,803
對,兩萬美金,60萬台幣

1199
00:54:55,803 --> 00:54:57,183
就是第一名60萬台幣

1200
00:54:57,183 --> 00:54:59,184
然後就是很單純的你把

1201
00:54:59,184 --> 00:55:01,904
你用這種概念把它應用到

1202
00:55:01,904 --> 00:55:04,285
你手邊所有擁有的asset

1203
00:55:04,285 --> 00:55:05,365
就可以了

1204
00:55:05,365 --> 00:55:07,226
不一定要那麼漂亮,但是

1205
00:55:07,226 --> 00:55:10,087
規則我們會在12月1號

1206
00:55:10,087 --> 00:55:11,967
我會把它翻譯中文版

1207
00:55:11,967 --> 00:55:13,327
把它放出來

1208
00:55:13,327 --> 00:55:15,468
所以這個消息讓各位知道一下

1209
00:55:15,468 --> 00:55:16,788
就是12月1號開始我們的比賽

1210
00:55:17,537 --> 00:55:21,559
然後呢 是讓各位從 SSO 上買到的 ASAP 組合起來

1211
00:55:21,559 --> 00:55:24,740
最後變成一個很棒的內容

1212
00:55:24,740 --> 00:55:26,380
然後放進場景裡面來報名比賽

1213
00:55:26,380 --> 00:55:31,482
就可以了 四十五天

1214
00:55:31,482 --> 00:55:34,843
應該 SSO 上面組一組不用太久

1215
00:55:34,843 --> 00:55:35,803
好 我的分享到這邊 謝謝

1216
00:55:35,803 --> 00:55:42,145
我們有時間嗎?

1217
00:55:42,145 --> 00:55:42,506
有 還有一點時間

1218
00:55:42,506 --> 00:55:43,706
那我們就開放剛剛我們

1219
00:55:48,001 --> 00:55:51,022
那個動漫的QA吧

1220
00:55:51,022 --> 00:55:52,543
看有沒有人針對剛剛講完這個

1221
00:55:52,543 --> 00:55:56,004
用Unity製作日式動漫風格的動畫

1222
00:55:56,004 --> 00:55:58,285
內容有疑問的

1223
00:55:58,285 --> 00:56:01,666
我想問一下

1224
00:56:01,666 --> 00:56:04,467
它是所有東西都放在同一個SIM裡面嗎對

1225
00:56:04,467 --> 00:56:09,689
那他們有三個人他們是怎麼分工的

1226
00:56:09,689 --> 00:56:14,811
那個小林信行他就是專門做模型

1227
00:56:14,811 --> 00:56:17,411
只對角色模型跟對角色的

1228
00:56:18,328 --> 00:56:20,750
Shader 做複合

1229
00:56:20,750 --> 00:56:22,591
所以第一個 Callhead 它是最重

1230
00:56:22,591 --> 00:56:24,893
Callhead 是場景還有 PM

1231
00:56:24,893 --> 00:56:27,175
所以要跟那些外部的人聯繫

1232
00:56:27,175 --> 00:56:30,337
然後呢 所有的分鏡是它做的

1233
00:56:30,337 --> 00:56:33,199
所以剛剛看到所有的動作 執行行為

1234
00:56:33,199 --> 00:56:34,760
是第一個 Callhead 做的

1235
00:56:34,760 --> 00:56:37,682
所以它掛 PM

1236
00:56:37,682 --> 00:56:39,623
然後那個 Seya 就單純做工具

1237
00:56:39,623 --> 00:56:40,984
就是單純就是說

1238
00:56:40,984 --> 00:56:41,605
你用什麼需求

1239
00:56:44,911 --> 00:56:47,672
所以實際上他們在製作過程中不會說

1240
00:56:47,672 --> 00:56:50,274
有兩個人會同時碰到同一個模型的問題

1241
00:56:50,274 --> 00:56:50,694
不會不會

1242
00:56:50,694 --> 00:56:54,256
因為小林本身就是專心在那個角色的建模

1243
00:56:54,256 --> 00:56:57,138
因為其實

1244
00:56:57,138 --> 00:57:03,181
我們講人物模型跟場景模型是兩個分工

1245
00:57:03,181 --> 00:57:04,622
在我們認知的美術領域裡面

1246
00:57:04,622 --> 00:57:06,342
Environment Artist就是不一樣

1247
00:57:06,342 --> 00:57:07,023
一個是

1248
00:57:07,023 --> 00:57:10,545
Reagent做骨架是一個分工

1249
00:57:10,545 --> 00:57:12,226
化材質的分工

1250
00:57:12,226 --> 00:57:12,966
建模

1251
00:57:12,966 --> 00:57:13,786
所以建模有分

1252
00:57:14,373 --> 00:57:18,255
人物模型、場景模型、骨架、材質

1253
00:57:18,255 --> 00:57:20,756
還有其實Animation其實也是分工啦

1254
00:57:20,756 --> 00:57:23,696
所以原則上來講它應該是不同的植物

1255
00:57:23,696 --> 00:57:29,178
它應該是不同的植物

1256
00:57:29,178 --> 00:57:29,618
我想請問

1257
00:57:29,618 --> 00:57:32,859
你們在這個動畫裡面有用到算Lightmap的這件事情嗎?

1258
00:57:32,859 --> 00:57:35,320
Lightmap已經算完了

1259
00:57:35,320 --> 00:57:37,741
Lightmap已經算完了

1260
00:57:37,741 --> 00:57:40,582
所以它還是有打燈的嗎?

1261
00:57:40,582 --> 00:57:43,243
應該是說上面如果你看到那種有陰影感

1262
00:57:46,730 --> 00:57:50,934
舉個例子來講,我把它再接回來

1263
00:57:50,934 --> 00:57:56,158
我們來看一下那個場景

1264
00:57:56,158 --> 00:57:57,159
這個比較特別一點

1265
00:57:57,159 --> 00:58:02,142
因為他們想要大部分的內容都盡量可以做假

1266
00:58:02,142 --> 00:58:09,068
所以你看起來像是很漂亮的場景

1267
00:58:09,068 --> 00:58:11,790
簡單來說,其實裡面很多模型都是假的

1268
00:58:23,369 --> 00:58:25,370
像一開始這個時候啊

1269
00:58:25,370 --> 00:58:26,851
這裡面是有光照的

1270
00:58:26,851 --> 00:58:29,172
然後也有去算

1271
00:58:29,172 --> 00:58:33,435
然後呢 但是其實這個大部分都是平面貼圖

1272
00:58:33,435 --> 00:58:34,795
它沒有太多紋路

1273
00:58:34,795 --> 00:58:36,396
然後比如說像這個

1274
00:58:36,396 --> 00:58:38,438
這個你看起來是有場景對不對

1275
00:58:38,438 --> 00:58:40,839
然後我們回頭來看

1276
00:58:40,839 --> 00:58:43,160
它是幾片疊在一起

1277
00:58:43,160 --> 00:58:45,081
它不需要光照

1278
00:58:45,081 --> 00:58:48,643
它就是可以事先算好或畫好

1279
00:58:48,643 --> 00:58:51,005
然後呢 時間到的時候疊起來

1280
00:58:51,965 --> 00:58:53,806
你以為是3D的

1281
00:58:53,806 --> 00:58:55,467
它不一定是3D的

1282
00:58:55,467 --> 00:58:58,688
那比如說像這裡就會需要用到光照

1283
00:58:58,688 --> 00:59:00,810
所以這個是3D模型

1284
00:59:00,810 --> 00:59:02,510
它就會用到光照

1285
00:59:02,510 --> 00:59:05,332
但是在這個專案裡面所有的光照呢

1286
00:59:05,332 --> 00:59:07,453
它兩個都有

1287
00:59:07,453 --> 00:59:09,334
GI跟MIX都有

1288
00:59:09,334 --> 00:59:15,097
所以它有用到Line-F

1289
00:59:15,097 --> 00:59:16,218
它用到Line-F

1290
00:59:19,917 --> 00:59:33,685
Nondirectional還是Directional的設定

1291
00:59:33,685 --> 00:59:33,926
光嗎?對

1292
00:59:33,926 --> 00:59:34,186
來看一下

1293
00:59:34,186 --> 00:59:36,567
你自己目擊率為什麼不一樣

1294
00:59:36,567 --> 00:59:37,248
應該是你的太高了

1295
00:59:37,248 --> 00:59:38,168
我的太高了

1296
00:59:38,168 --> 00:59:38,768
所以我這邊吃不到

1297
00:59:38,768 --> 00:59:39,769
還是自動降了8600

1298
00:59:39,769 --> 00:59:40,469
我把它調

1299
00:59:40,469 --> 00:59:49,135
很大很大

1300
00:59:54,896 --> 00:59:56,336
你剛剛說他的什麼東西

1301
00:59:56,336 --> 01:00:01,377
Directional Light跟Non-Directional

1302
01:00:01,377 --> 01:00:01,997
不知道是哪一個選項

1303
01:00:01,997 --> 01:00:04,798
你要看他的光線有多少是不是

1304
01:00:04,798 --> 01:00:06,418
然後我也想要知道就是

1305
01:00:06,418 --> 01:00:08,678
因為剛才你有提到對日本動漫而言

1306
01:00:08,678 --> 01:00:12,699
光線對動畫師而言不是很有意義

1307
01:00:12,699 --> 01:00:15,440
動畫師想要決定怎麼樣畫光怎麼樣畫光

1308
01:00:15,440 --> 01:00:18,400
那在3D軟體 在3D引擎裡面

1309
01:00:18,400 --> 01:00:19,720
遊戲引擎裡面

1310
01:00:19,720 --> 01:00:22,601
燈光對這個project的意義在什麼地方

1311
01:00:22,601 --> 01:00:23,321
尤其是對人物

1312
01:00:24,238 --> 01:00:27,161
就是照亮它該照亮的地方

1313
01:00:27,161 --> 01:00:28,102
比如說

1314
01:00:28,102 --> 01:00:29,583
像這個場景啊

1315
01:00:29,583 --> 01:00:30,924
目前你可以看到

1316
01:00:30,924 --> 01:00:32,706
其實場景光非常多

1317
01:00:32,706 --> 01:00:34,928
但現在只有四盞光是亮的

1318
01:00:34,928 --> 01:00:35,688
一個是

1319
01:00:35,688 --> 01:00:38,131
Directional Light 有一盞

1320
01:00:38,131 --> 01:00:38,651
然後呢

1321
01:00:38,651 --> 01:00:41,594
Point Light 有兩盞

1322
01:00:41,594 --> 01:00:43,615
都是打在奇怪的地方

1323
01:00:43,615 --> 01:00:44,776
都是打在這個人

1324
01:00:44,776 --> 01:00:45,837
人

1325
01:00:45,837 --> 01:00:46,878
人正面

1326
01:00:46,878 --> 01:00:47,779
就是這個人的正面

1327
01:00:52,412 --> 01:00:57,236
所以它其實有點像是 只是單純的把這個地方照亮而已

1328
01:00:57,236 --> 01:00:59,458
那這個照亮不是因為

1329
01:00:59,458 --> 01:01:02,861
不是因為它照下去之後

1330
01:01:02,861 --> 01:01:05,103
它要表現出什麼 可能是整體亮度

1331
01:01:05,103 --> 01:01:08,666
比如說像這裡

1332
01:01:08,666 --> 01:01:11,068
像這裡剛剛那些燈都擠掉了

1333
01:01:11,068 --> 01:01:17,593
就剩下最原始的Directional Line兩盞

1334
01:01:17,593 --> 01:01:18,574
兩盞兩盞定向光去打

1335
01:01:21,614 --> 01:01:24,115
來照這整個場景

1336
01:01:24,115 --> 01:01:26,396
那這個背景本身可能已經有顏色了

1337
01:01:26,396 --> 01:01:27,597
所以它不需要花

1338
01:01:27,597 --> 01:01:30,959
就是這個背景本身就是一個漫畫

1339
01:01:30,959 --> 01:01:31,359
是一張圖

1340
01:01:31,359 --> 01:01:33,460
所以它主要照呢

1341
01:01:33,460 --> 01:01:36,021
是為了要讓Shader去呈現

1342
01:01:36,021 --> 01:01:38,202
它上面這些色塊

1343
01:01:38,202 --> 01:01:39,723
所以它的用意呢可能就是

1344
01:01:39,723 --> 01:01:41,864
單純只是讓Shader去有作用

1345
01:01:48,039 --> 01:01:52,101
這些光線會隨著不同的場景去切換

1346
01:01:52,101 --> 01:01:55,964
然後各種光都有

1347
01:01:55,964 --> 01:01:58,065
它有點像是我們在做手遊的時候

1348
01:01:58,065 --> 01:02:01,968
就是手遊因為 forward rendering

1349
01:02:01,968 --> 01:02:02,728
所以沒辦法打太多燈

1350
01:02:18,395 --> 01:02:20,417
這樣有回答你的問題嗎?

1351
01:02:20,417 --> 01:02:21,798
其實他在發包的時候

1352
01:02:21,798 --> 01:02:25,021
因為我剛剛看到前面一個場景全部都是Play

1353
01:02:25,021 --> 01:02:26,842
那下面這個比較複雜的場景

1354
01:02:26,842 --> 01:02:27,463
他有3D運鏡的

1355
01:02:27,463 --> 01:02:32,067
變成是他全部場景就要做3D的

1356
01:02:32,067 --> 01:02:33,007
可是這兩個專長應該就是不太一樣

1357
01:02:33,007 --> 01:02:36,110
你發包是變成要發過兩個單位嗎?對

1358
01:02:36,110 --> 01:02:37,031
就有一個人是專門負責

1359
01:02:37,031 --> 01:02:37,751
3D模型的話

1360
01:02:37,751 --> 01:02:39,453
CoreHead他負責蠻多的

1361
01:02:39,453 --> 01:02:41,494
就是我們原先那個PM

1362
01:02:41,494 --> 01:02:43,676
但是我看我們的外包

1363
01:02:43,676 --> 01:02:44,837
好像沒有3D模型

1364
01:02:44,837 --> 01:02:46,638
就只有2D特效跟Rigging

1365
01:02:46,980 --> 01:02:51,063
所以像這個3D場景的部分可能是在原本IQC建的對對對

1366
01:02:51,063 --> 01:02:53,004
你看可以看到這個就是剛剛那個

1367
01:02:53,004 --> 01:02:55,846
那條那條

1368
01:02:55,846 --> 01:02:58,448
他其實要呈現這條照外光

1369
01:02:58,448 --> 01:02:59,409
但是他用這條來呈現

1370
01:02:59,409 --> 01:03:01,971
蠻特別的

1371
01:03:01,971 --> 01:03:04,673
然後我們本身

1372
01:03:04,673 --> 01:03:09,016
本身Timeline的用途在這個專案裡面

1373
01:03:09,016 --> 01:03:11,118
其實我覺得有點

1374
01:03:11,118 --> 01:03:12,919
應該算偷吃

1375
01:03:12,919 --> 01:03:14,200
應該算偷吃步吧

1376
01:03:14,200 --> 01:03:15,001
因為正常來講

1377
01:03:16,298 --> 01:03:20,399
我們所認知的Timeline是

1378
01:03:20,399 --> 01:03:22,879
每一條都是一個主角

1379
01:03:22,879 --> 01:03:24,840
一個角色做什麼事情

1380
01:03:24,840 --> 01:03:28,640
但是這邊呢我發現這個專案的做法是有點不一樣

1381
01:03:28,640 --> 01:03:30,321
它是所有的動畫

1382
01:03:30,321 --> 01:03:33,802
都是在Maya那邊或Motion Builder那邊畫好

1383
01:03:33,802 --> 01:03:35,982
然後導過來之後什麼都不用改

1384
01:03:35,982 --> 01:03:37,302
直接拉進來

1385
01:03:37,302 --> 01:03:39,643
所以它就變成是直接就是一個Animation Track

1386
01:03:39,643 --> 01:03:42,403
所以這個Animation Track就是主導

1387
01:03:42,403 --> 01:03:44,984
整個那個Timeline它在播的時候

1388
01:03:46,154 --> 01:03:47,675
的行為

1389
01:03:47,675 --> 01:03:48,376
就變成

1390
01:03:48,376 --> 01:03:49,557
你如果要修

1391
01:03:49,557 --> 01:03:51,879
你要回到Maya那邊去修

1392
01:03:51,879 --> 01:03:53,380
跟我們認知正常來講

1393
01:03:53,380 --> 01:03:53,920
你可以在這邊取決

1394
01:03:53,920 --> 01:03:56,422
用TimeLine去修

1395
01:03:56,422 --> 01:03:57,463
不太一樣

1396
01:03:57,463 --> 01:03:58,084
我覺得可能是因為他們對

1397
01:03:58,084 --> 01:04:00,486
TimeLine也還不熟

1398
01:04:00,486 --> 01:04:02,848
所以當初這麼做的原因

1399
01:04:02,848 --> 01:04:05,270
就是用他們熟悉的方式來做

1400
01:04:05,270 --> 01:04:10,234
反正導進來都可以用

1401
01:04:10,234 --> 01:04:10,894
OK

1402
01:04:10,894 --> 01:04:12,095
不好意思那因為時間的關係

1403
01:04:12,095 --> 01:04:13,096
我們可能就是

1404
01:04:13,096 --> 01:04:13,696
就是上半場

